{"version":3,"file":"static/js/186.e72b5381.chunk.js","mappings":"sQAwEA,MAAMA,EAAW,GAQjB,SAASC,EAAyBC,GAChC,MAAM,aAANC,OAAoBD,EAAME,UAAS,aACrC,CAEA,SAASC,EAAUC,EAAWC,GAC5B,MAAMC,EAAWF,EAAUG,cAAc,YAADN,OAAaI,EAAE,MACvC,MAAZC,GAGJA,EAASE,OACX,CAMA,SAASC,EACPC,EACAC,GAEA,MAAMC,EAAcD,EAAWE,iBAAiBH,GAChD,IAAII,EAAOC,EAAAA,GAAcC,IAAIN,GAC7B,QAAaO,IAATH,EAAoB,CACtBA,EAAOF,EAAYM,MAAK,KAAMC,EAAAA,EAAAA,wBAAuBR,EAAY,QACjE,MAAMS,EAAcR,EAAYM,MAAK,KAAMG,EAAAA,EAAAA,YAAWC,mBACtDP,EAAAA,GAAcQ,IAAIb,EAAiBI,GACnCU,EAAAA,GAAqBD,IAAIb,EAAiBU,EAC5C,CACA,OAAON,CACT,CAEA,SAASW,EAAmBC,GAC1B,MAAMC,EAAcD,EAAOE,iBAC3B,OAAuB,OAAhBD,EAAuBA,EAAYE,cAAgBC,QAC5D,CAkDA,SAASC,EAAUC,GACjB,IAAIC,EAAOD,EACX,KAAgB,OAATC,GAAe,CACpB,MAAMC,EAAaD,EAAKE,aAAa,WACrC,GAAkB,MAAdD,EACF,OAAOA,EAETD,EAAOA,EAAKG,aACd,CACA,OAAO,IACT,CAEA,SAASC,EAAkBL,GACzB,IAAIC,EAAOD,EACX,KAAgB,OAATC,GAAe,CACpB,GAAsB,OAAlBA,EAAKK,UAAuC,OAAlBL,EAAKK,SACjC,OAAOL,EAAKM,wBAAwBC,MAEtCP,EAAOA,EAAKG,aACd,CACA,OAAO,CACT,CAEA,SAASK,EACPC,EACAC,EACAC,EACAjC,EACAkC,EACAC,GAEA,IAAK,MAAMzC,KAAMsC,EAAK,CACpB,MAAMI,EAAOC,EAAQN,EAAMrC,EAAIuC,GAC/B,GAAa,OAATG,GAAgC,OAAfpC,EAAqB,CACxC,MAAMC,EAAcD,EAAWE,iBAAiBkC,EAAKE,MACrDtC,EAAWuC,WAAY,EACvBvC,EAAWwC,eAAevC,GAC1BD,EAAWyC,OAAON,EAAI,CAACO,UAAU,IACjC1C,EAAWuC,WAAY,EACvB,MAAMI,EAAUC,KAAKC,UAAU7C,EAAW8C,kBAC1CZ,GAAiBa,IACf,MAAOC,EAAGC,GAAKhB,EAAa5B,IAAIX,IAChCwD,EAAAA,EAAAA,eAAc,gBACdH,EAAUI,eAAeH,EAAGC,EAAGN,EAAQ,GAE3C,CACF,CACF,CAkBA,SAASS,EACPC,EACAC,EACArB,GAEA,MAAMsB,EAActB,EAAa5B,IAAIgD,GAC/BG,EAAYvB,EAAa5B,IAAIiD,GACnC,QAAoBhD,IAAhBiD,QAA2CjD,IAAdkD,EAC/B,OAAO,KAET,MAAMC,EAASC,KAAKC,IAAIJ,EAAY,GAAIC,EAAU,IAC5CI,EAAOF,KAAKG,IAAIN,EAAY,GAAIC,EAAU,IAC1CM,EAASJ,KAAKC,IAAIJ,EAAY,GAAIC,EAAU,IAGlD,MAAO,CACLI,OACAG,KAJWL,KAAKG,IAAIN,EAAY,GAAIC,EAAU,IAK9CC,SACAK,SAEJ,CAEA,SAASE,EACPjC,EACAsB,EACAC,EACArB,GAEA,MAAMgC,EAAOb,EAAgBC,EAASC,EAAOrB,GAC7C,GAAa,OAATgC,EACF,MAAO,GAET,MAAM,OAACR,EAAM,KAAEM,EAAI,KAAEH,EAAI,OAAEE,GAAUG,EAC/BjC,EAAM,GAEZ,IAAK,IAAIgB,EAAIS,EAAQT,GAAKY,EAAMZ,IAC9B,IAAK,IAAIC,EAAIa,EAAQb,GAAKc,EAAMd,IAC9BjB,EAAIkC,KAAKnC,EAAKkB,GAAGkB,MAAMnB,GAAGtD,IAG9B,OAAOsC,CACT,CAsBA,SAASoC,EAAeC,GAAgB,IAAf,WAACrE,GAAWqE,EACnC,MAAM,iBAACC,EAAgB,kBAAEC,IAAqBC,EAAAA,EAAAA,YAAWC,EAAAA,IAEzD,OAA0B,OAAtBF,GAAmD,OAArBD,EACzB,MAIPI,EAAAA,EAAAA,KAACC,EAAAA,sBAAqB,CACpBC,cAAe5E,EACf6E,aAAcP,EAAiBjF,MAC/ByF,aAAcR,EAAiBS,MAC/BC,kBAAkB,EAAKC,SACtBV,GAGP,CAEA,SAASlC,EACPN,EACAmD,EACAjD,GAEA,MAAMkD,EAASlD,EAAa5B,IAAI6E,GAChC,QAAe5E,IAAX6E,EACF,OAAO,KAET,MAAOnC,EAAGC,GAAKkC,EAEf,OADYpD,EAAKkB,GACNkB,MAAMnB,EACnB,CAEA,SAASoC,EAAeC,GAUpB,IAVqB,KACvBjD,EAAI,KACJL,EAAI,aACJE,EAAY,SACZqD,EAAQ,gBACRC,EAAe,QACfC,EAAO,gBACPtD,EAAe,kBACfuD,EAAiB,eACjBC,GACDL,EACC,MAAMM,EAAcC,EAAAA,OAAO,KAAOC,eAAgB,MAElDC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeJ,EAAYK,QACjC,GAAqB,OAAjBD,EAAuB,CACzB,MAAM9B,EAAOqB,EAAS1D,wBACtBmE,EAAaE,MAAMC,IAAG,GAAA5G,OAAM2E,EAAKhB,EAAC,MAClC8C,EAAaE,MAAME,KAAI,GAAA7G,OAAM2E,EAAKjB,EAAC,KACrC,IACC,CAACsC,KAEJQ,EAAAA,EAAAA,YAAU,KACR,MAAMM,EAAsBC,IAC1B,MAAMN,EAAeJ,EAAYK,QAEd,OAAjBD,GACCA,EAAaO,SAASD,EAAME,SAE7BF,EAAMG,iBACR,EAIF,OADAC,OAAOC,iBAAiB,QAASN,GAC1B,IAAMK,OAAOE,oBAAoB,QAASP,EAAmB,GACnE,CAACZ,IACJ,MAAML,EAASlD,EAAa5B,IAAI+B,EAAK1C,IAErC,QAAeY,IAAX6E,EACF,OAAO,KAET,MAAOnC,EAAGC,GAAKkC,EAEf,OAEEyB,EAAAA,EAAAA,MAAA,OACEC,UAAU,WACVC,IAAKnB,EACLoB,cAAgBC,IACdA,EAAER,iBAAiB,EAErBS,cAAgBD,IACdA,EAAER,iBAAiB,EAErBU,YAAcF,IACZA,EAAER,iBAAiB,EAErBW,QAAUH,IACRA,EAAER,iBAAiB,EACnBvB,SAAA,EACFP,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAUqE,eACRpE,EACAC,EACc,WAAdb,EAAKiF,KAAoB,SAAW,SACrC,IAEH7B,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SACL,WAAd7C,EAAKiF,KAAoB,cAAgB,qBAG9C3C,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACP5B,EAAgB,CAACnD,EAAK1C,KAAK,KACzB,MAAM4H,GAAO5G,EAAAA,EAAAA,YACb4G,EAAKC,QACLD,EAAKE,QAAOC,EAAAA,EAAAA,wBAAuB,IAErCjC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,kBAEzBP,EAAAA,EAAAA,KAAA,SACe,WAAdtC,EAAKiF,MAA2B,IAANpE,IACzB2D,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAzC,SAAA,CACsB,OAAnBS,GAA2BA,EAAe1C,IAAMA,IAC/C0B,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACP1B,EAAkB,MAClBD,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,sBAGN,OAAnBS,GACAA,EAAe1C,IAAMA,GACG,eAAxB0C,EAAe2B,QACf3C,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACP1B,EAAkB,CAAC4B,KAAM,YAAarE,MACtCwC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,sBAGN,OAAnBS,GACAA,EAAe1C,IAAMA,GACG,cAAxB0C,EAAe2B,QACf3C,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACP1B,EAAkB,CAAC4B,KAAM,aAAcrE,MACvCwC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,uBAG3BP,EAAAA,EAAAA,KAAA,aAGJA,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAU4E,YAAY1E,EAAE,IAE1BuC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,wBAEzBP,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAU4E,YAAY1E,EAAI,EAAE,IAE9BuC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,wBAEzBP,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAU6E,eAAe5E,EAAE,IAE7BwC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,0BAEzBP,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAU6E,eAAe5E,EAAI,EAAE,IAEjCwC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,2BAEzBP,EAAAA,EAAAA,KAAA,SAC0B,IAAzB3C,EAAK,GAAGoC,MAAM0D,SACbnD,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAU+E,eAAe9E,EAAE,IAE7BwC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,oBAGV,IAAhBlD,EAAK8F,SACJnD,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAUgF,YAAY9E,EAAE,IAE1BuC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,kBAG3BP,EAAAA,EAAAA,KAAA,UACEmC,UAAU,OACVM,QAASA,KACPjF,GAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAUiF,aACVjF,EAAUkF,QAAQ,IAEpBzC,GAAS,EACTP,UACFP,EAAAA,EAAAA,KAAA,QAAMmC,UAAU,OAAM5B,SAAC,qBAI/B,CAEA,SAASiD,EAASC,GAad,IAbe,KACjB/F,EAAI,aACJH,EAAY,WACZjC,EAAU,UACVoI,EAAS,WACTC,EAAU,kBACVC,EAAiB,MACjBjJ,EAAK,gBACLkG,EAAe,gBACfrD,EAAe,KACfH,EAAI,kBACJ0D,EAAiB,eACjBC,GACDyC,EACC,MAAOI,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GACnCC,GAAc9C,EAAAA,EAAAA,QAAO,MACrB+C,EAAyB,WAAdvG,EAAKiF,KAChBtH,EAAkBqC,EAAKE,KACvBsG,EAAgBD,EAAW,KAAO,KAClCE,EAAYzG,EAAKP,MACjByD,EAAWoD,EAAY1C,QACvBb,EAASlD,EAAa5B,IAAI+B,EAAK1C,IAC/BoJ,EACe,OAAnBpD,QACWpF,IAAX6E,GACAA,EAAO,KAAOO,EAAe1C,GACf,IAAdmC,EAAO,GAQT,OANAW,EAAAA,EAAAA,YAAU,MACJsC,GAAcE,GAChBE,GAAY,EACd,GACC,CAACJ,EAAWE,KAGb1B,EAAAA,EAAAA,MAACgC,EAAa,CACZ/B,UAAS,GAAAvH,OAAKD,EAAM0J,UAAS,KAAAzJ,OAAIqJ,EAAWtJ,EAAM2J,gBAAkB,GAAE,KAAA1J,OACpE+I,EAAahJ,EAAM4J,kBAAoB,IAEzC,UAAS7G,EAAK1C,GACdwJ,UAAW,EACXjD,MAAO,CAACpE,MAAqB,OAAdgH,EAAqBA,OAAYvI,GAAW2E,SAAA,CAC1DqD,IACC5D,EAAAA,EAAAA,KAAA,OACEmC,UAAS,GAAAvH,OAAKD,EAAM8J,yBAAwB,KAAA7J,OAC1C8I,EAAY/I,EAAM+J,iBAAmB,MAI1Cd,GAAqBF,GACpB1D,EAAAA,EAAAA,KAACN,EAAe,CAACpE,WAAYA,KAE7B4G,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAzC,SAAA,EACEP,EAAAA,EAAAA,KAAA,OACE2E,wBAAyB,CACvBC,OACsB,KAApBvJ,EACIX,EAAyBC,GACzBS,EAAqBC,EAAiBC,OAGhD0E,EAAAA,EAAAA,KAAA,OAAKmC,UAAWxH,EAAMkK,iBAAkB,oBAAkB,YAG7DjB,IAAsBF,IACrB1D,EAAAA,EAAAA,KAAA,OAAKmC,UAAWxH,EAAMmK,+BAAgC1C,IAAK4B,EAAYzD,UACrEP,EAAAA,EAAAA,KAAA,UACEmC,UAAWxH,EAAMoK,sBACjBtC,QAAUH,IACRwB,GAAaD,GACbvB,EAAER,iBAAiB,EACnBvB,UACFP,EAAAA,EAAAA,KAAA,KAAGmC,UAAU,qBAIlB0B,GACc,OAAbjD,IACAoE,EAAAA,EAAAA,eACEhF,EAAAA,EAAAA,KAACU,EAAe,CACdhD,KAAMA,EACNkD,SAAUA,EACVC,gBAAiBA,EACjBC,QAASA,IAAMgD,GAAY,GAC3BtG,gBAAiBA,EACjBD,aAAcA,EACdF,KAAMA,EACN0D,kBAAmBA,EACnBC,eAAgBA,IAElBvE,SAASwI,MAEZb,IAAYpE,EAAAA,EAAAA,KAAA,OAAKmC,UAAWxH,EAAMuK,6BAGzC,CAEe,SAASC,EAAcC,GAIlC,IAJmC,QACrCC,EACAhI,KAAMiI,EAAO,MACb3K,GACDyK,EACC,MAAOzB,EAAY4B,EAAaC,IAC9BC,EAAAA,EAAAA,yBAAwBJ,GACpBK,GAAmBxE,EAAAA,EAAAA,QAAO,CAC9ByE,MAAO,EACPC,KAAM,KAED5E,EAAgBD,IAAqBgD,EAAAA,EAAAA,UAC1C,MAEI8B,GAAa3E,EAAAA,EAAAA,QAAO,MACpB4E,GAAgB5E,EAAAA,EAAAA,QAAO,MACvB6E,GAAuB7E,EAAAA,EAAAA,QAAO,OAC9B,iBAACtB,IAAoBE,EAAAA,EAAAA,YAAWC,EAAAA,KAC/B2D,EAAWsC,IAAgBjC,EAAAA,EAAAA,WAAS,IACpCkC,EAAgBC,IAAqBnC,EAAAA,EAAAA,WAAS,IAC9CoC,EAAaC,IAAkBrC,EAAAA,EAAAA,WAAS,IACxC1H,IAAUgK,EAAAA,EAAAA,6BACXC,GAAepF,EAAAA,EAAAA,SAAO,IACrBqF,EAAYC,IAAiBzC,EAAAA,EAAAA,UAAS,MACvC0C,GAAWvF,EAAAA,EAAAA,QAAO,MAClB3D,GAAemJ,EAAAA,EAAAA,UAAQ,KAC3B,MAAMC,EAAM,IAAIC,IAEhB,IAAK,IAAIrI,EAAI,EAAGA,EAAI+G,EAAQnC,OAAQ5E,IAAK,CACvC,MACMkB,EADM6F,EAAQ/G,GACFkB,MAClB,IAAK,IAAInB,EAAI,EAAGA,EAAImB,EAAM0D,OAAQ7E,IAAK,CACrC,MAAMZ,EAAO+B,EAAMnB,GACnBqI,EAAIzK,IAAIwB,EAAK1C,GAAI,CAACsD,EAAGC,GACvB,CACF,CACA,OAAOoI,CAAG,GACT,CAACrB,IACEjI,GAAOqJ,EAAAA,EAAAA,UAAQ,KACnB,GAAuB,OAAnB1F,EACF,OAAOsE,EAET,MAAMuB,EAAQvB,EAAQwB,MAAM,GAgB5B,OAfAD,EAAME,MAAK,CAACC,EAAGC,KACb,MAAMC,EAASF,EAAEvH,MACX0H,EAASF,EAAExH,MACXnB,EAAI0C,EAAe1C,EACnB8I,EAAWjL,EAAAA,GAAqBR,IAAIuL,EAAO5I,GAAGV,OAAS,GACvDyJ,EAAWlL,EAAAA,GAAqBR,IAAIwL,EAAO7I,GAAGV,OAAS,GAC7D,MAAiB,KAAbwJ,GAAgC,KAAbC,EACd,EAEmB,cAAxBrG,EAAe2B,KACVyE,EAASE,cAAcD,GAEzBA,EAASC,cAAcF,EAAS,IAEzCP,EAAMU,QAAQjC,EAAQ,IACfuB,CAAK,GACX,CAACvB,EAAStE,KACNwG,EAAuBC,IAA4B1D,EAAAA,EAAAA,UAAS,MAC7DzI,EAAaoL,EAAAA,QAAQ,KAAOgB,EAAAA,cAW/B,CAAC9H,IACG+H,EAAiBC,IAAsB7D,EAAAA,EAAAA,UAAS,IACjD8D,GAAkBnB,EAAAA,EAAAA,UACtB,IAAM,IAAIoB,IAAIH,IACd,CAACA,KAGHvG,EAAAA,EAAAA,YAAU,KACR,MAAMrG,EAAY0L,EAASnF,QAEzBqC,GACAlH,SAASsL,gBAAkBtL,SAASwI,MACtB,OAAdlK,GAEAA,EAAUI,OACZ,GACC,CAACwI,IAEJ,MAAMnG,IAAkBwK,EAAAA,EAAAA,cACrBvK,IACCpB,EAAO0B,QAAO,KACZ,MAAMM,GAAY4J,EAAAA,EAAAA,eAAc5C,IAC5B6C,EAAAA,EAAAA,IAAa7J,IACfZ,EAAGY,EACL,GACA,GAEJ,CAAChC,EAAQgJ,IAiBL8C,IAAsBH,EAAAA,EAAAA,cAC1B,CAAC1J,EAAGC,EAAG6J,KACL,MAAMpN,EAAKqC,EAAKkB,GAAGkB,MAAMnB,GAAGtD,GAE5B,GADA8K,EAAcxE,QAAUtG,EACpBoN,EAAQ,CACV,MAAMC,EAAc/I,EAClBjC,EACAmK,EACAxM,EACAuC,GAEFqK,EAAmBS,EACrB,MACEZ,EAAyBzM,GACzB4M,EAAmBnN,GACnBK,EAAU2L,EAASnF,QAAStG,EAC9B,GAEF,CAACuC,EAAciK,EAAuBnK,IAGlCiL,IAAmBN,EAAAA,EAAAA,cAAY,KACnC,GAAmB,OAAf1M,GAAiD,OAA1BkM,EAAgC,CACzD,MAAM5J,EAAOM,KAAKC,UAAU7C,EAAW8C,kBACvCZ,IAAiBa,IACf,MAAMoC,EAASlD,EAAa5B,IAAI6L,GAChC,QAAe5L,IAAX6E,EACF,QAEFjC,EAAAA,EAAAA,eAAc,gBACd,MAAOF,EAAGC,GAAKkC,EACfpC,EAAUI,eAAeH,EAAGC,EAAGX,EAAK,GAExC,IACC,CAACL,EAAcjC,EAAYkM,EAAuBhK,KAE/C+K,IAAcP,EAAAA,EAAAA,cAAY,KAC9BQ,YAAW,KACT,MAAMC,EAAoBpM,EAAOE,iBACA,IAADmM,EAAN,OAAtBD,IACFA,EAAkBtN,MAAM,CAACwN,eAAe,IACnB,QAArBD,EAAA3G,OAAO6G,sBAAc,IAAAF,GAArBA,EAAuBG,kBACzB,GACC,GAAG,GACL,CAACxM,KAEJ+E,EAAAA,EAAAA,YAAU,KACR,MAAMrG,EAAY0L,EAASnF,QAC3B,GAAkB,OAAdvG,EACF,OAEF,MAAM+N,EAAM1M,EAAmBC,GAQzB0M,EAAqBpH,IACzB,MAAM9E,EAAaH,EAAUiF,EAAME,QACnC,GACiB,OAAfhF,GACAR,EAAO2M,cACPjO,EAAU6G,SAASD,EAAME,QACzB,CACA,GAbqBF,KACvB,MAAMrD,EAAIqD,EAAMsH,QAAUC,EAAU5K,EAC9BC,EAAIoD,EAAMwH,QAAUD,EAAU3K,EACpC,OAAOD,EAAI,GAAKC,EAAI,CAAC,EAUf6K,CAAgBzH,GAIlB,OAHA4D,GAAY,GACZkC,EAAyB,WACzBc,KAIF,GADAhD,GAAY,GA9tBS,KADH1D,EAguBGF,EAAME,QA/tBnBwH,UAAkBxH,EAAOyH,aAAa,qBAsuB5C,OANA9C,EAAc3J,GACd9B,EAAUwG,MAAMgI,WAAa,YAC7B7D,EAAiBpE,QAAU,CACzBqE,MAAOhE,EAAMsH,QACbrD,KAAM5I,EAAkB2E,EAAME,UAIlCyE,EAAahF,SAAU,EACnBkG,IAA0B3K,GACxB6G,GACF4E,KAEFb,EAAyB5K,GACzBmJ,GAAa,GACbF,EAAcxE,QAAUzE,GAExBiJ,EAAcxE,QAAU,KAE1BsG,EAAmBnN,EACrB,MAC4B,OAA1B+M,GA7nBR,SAAqC3F,GACnC,IAAIjF,EAAOiF,EACX,KAAgB,OAATjF,GAAe,CACpB,MAAMK,EAAWL,EAAKK,SACtB,GACe,WAAbA,GACa,UAAbA,GACa,aAAbA,EAEA,OAAO,EAETL,EAAOA,EAAKG,aACd,CACA,OAAO,CACT,CAgnBSyM,CAA4B7H,EAAME,UAEnC0D,GAAY,GACZe,EAAahF,SAAU,EACnBoC,GACF4E,KAEFb,EAAyB,MACzBG,EAAmBnN,GACnBuL,GAAa,GACbF,EAAcxE,QAAU,MAjwBhC,IAA0BO,CAkwBpB,EAGIqH,EAAYnO,EAAUmC,wBAEtBuM,EAAqB9H,IACzB,GAAmB,OAAf4E,EAAqB,CACvB,MAAMmD,EAAwB3D,EAAqBzE,QACnD,GAA8B,OAA1BoI,EAAgC,CAClC,MAAM,KAAC9D,EAAI,MAAED,GAASD,EAAiBpE,QAEjCqI,EAAW/D,GADJjE,EAAMsH,QAAUtD,GAE7B,IAAIrH,EAAIqD,EAAMsH,QAAUC,EAAU5K,EAC9BA,EAAI,GACNA,EAAI,GACKA,EAAI4K,EAAU/L,MAAQ,GAC/BmB,EAAI4K,EAAU/L,MAAQ,GACbwM,EAAW,KACpBrL,EAAIqH,EAAQC,EAAO,GAAKsD,EAAU5K,GAEpCoL,EAAsBnI,MAAME,KAAI,GAAA7G,OAAM0D,EAAC,KACzC,CACA,MACF,CACA,IAAKoF,EAAW,CACd,MAAM,QAACuF,EAAO,QAAEE,GAAWxH,GACrB,MAACxE,EAAK,EAAEmB,EAAC,EAAEC,EAAC,OAAEqL,GAAUV,EACxBW,EACJZ,EAAU3K,EAAY,GAARnB,GACd8L,EAAU3K,EAAInB,EAAQ,KACrBmJ,EAAahF,QAChB4E,EAAkB2D,GAClB,MAAMC,EACJnI,EAAME,SAAWgE,EAAWvE,SAC3B6H,EAAU5K,EAAa,IAATqL,GACbT,EAAU5K,EAAIqL,EAAS,IACtBtD,EAAahF,QAClB8E,EAAe0D,EACjB,CACA,GACEpG,IACC4C,EAAahF,SACY,OAA1BkG,EAEA,OAEF,MAAM3K,EAAaH,EAAUiF,EAAME,QACnC,GAAmB,OAAfhF,GAAuBA,IAAeiJ,EAAcxE,QAAS,CAChC,IAA3BqG,EAAgBxE,SAClBpI,EAAUwG,MAAMgI,WAAa,QAE/B,MAAMlB,EAAc/I,EAClBjC,EACAmK,EACA3K,EACAU,GAEyB,IAAvB8K,EAAYlF,OACdyE,EAAmBnN,GAEnBmN,EAAmBS,GAErBvC,EAAcxE,QAAUzE,CAC1B,GAGIkN,EAAmBpI,IACvB,GAAmB,OAAf4E,EAAqB,CACvB,MAAM,KAACX,EAAI,MAAED,GAASD,EAAiBpE,QAEvC,IAAIqI,EAAW/D,GADFjE,EAAMsH,QAAUtD,GAEzBgE,EAAW,KACbA,EAAW,IAEbnM,IAAiBa,IACf,MAAOC,GAAKf,EAAa5B,IAAI4K,IAC7B/H,EAAAA,EAAAA,eAAc,gBACdH,EAAU2L,kBAAkB1L,EAAGqL,EAAS,IAE1CnD,EAAc,KAChB,CAKG,IAADyD,EAHc,OAAdlP,GACA4M,EAAgBxE,OAAS,GACzBmD,EAAahF,UAEbvG,EAAUwG,MAAMgI,WAAa,OACR,QAArBU,EAAAlI,OAAO6G,sBAAc,IAAAqB,GAArBA,EAAuBpB,mBAEzBvC,EAAahF,SAAU,CAAK,EAO9B,OAJAwH,EAAI9G,iBAAiB,cAAe+G,GACpCD,EAAI9G,iBAAiB,cAAeyH,GACpCX,EAAI9G,iBAAiB,YAAa+H,GAE3B,KACLjB,EAAI7G,oBAAoB,cAAe8G,GACvCD,EAAI7G,oBAAoB,cAAewH,GACvCX,EAAI7G,oBAAoB,YAAa8H,EAAgB,CACtD,GACA,CACDzO,EACAe,EACAqH,EACArG,EACAiL,GACAd,EACAK,EACAF,EACApK,EACAgJ,EACA/I,GACA+H,EACAgD,MAGFnH,EAAAA,EAAAA,YAAU,KACR,IAAKsC,GAAuC,OAA1B8D,EAAgC,CAChD,MAAMsB,EAAM1M,EAAmBC,GAEzB6N,EAAuBxM,IAC3B,GAAa,OAATA,GAAgC,OAAfpC,EAAqB,CACxC,MAAMD,EAAkBqC,EAAKE,KACvBrC,EAAcD,EAAWE,iBAAiBH,GAChDC,EAAWwC,eAAevC,EAC5B,GAGI4O,EAAkBxI,IACtB,MAAM9E,EAAaH,EAAUiF,EAAME,QACnC,GAAIhF,IAAe2K,GAAyBnL,EAAO2M,aAAc,CAC/D,MAAMtL,EAAOC,EAAQN,EAAMR,EAAYU,GACvC2M,EAAoBxM,GACpBsI,GAAa,GACb4B,EAAmBnN,EACrB,GAGI2P,EAAiBzI,IAErB,MAAM0I,EAAU1I,EAAM0I,QACtB,GACc,KAAZA,GACY,KAAZA,GACY,IAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,IAAZA,GACY,KAAZA,IACChO,EAAO2M,aAER,OAKF,GAHgB,KAAZqB,GACF1I,EAAM2I,kBAGL5G,GACyB,OAA1B8D,GACAnL,EAAO+B,iBAAiBvC,MAAK,IAA0B,QAApB0O,EAAAA,EAAAA,oBACA,SAAlC5I,EAAME,OAAQ2I,gBACf,CACA,GA/4BV,SACEH,EACAI,EACAC,EACAC,GAEA,OAAIF,GAGY,KAAZJ,IACKO,EAAAA,GAAWF,EAAUC,EAIhC,CAi4BcE,CAAOR,EAAS1I,EAAM8I,SAAU9I,EAAM+I,QAAS/I,EAAMgJ,SAEvD,YADAtO,EAAOyO,gBAAgBC,EAAAA,aAAcpJ,GAGvC,GAn4BV,SACE0I,EACAI,EACAC,EACAC,GAEA,OAAIF,GAGY,KAAZJ,IACKO,EAAAA,GAAWF,EAAUC,EAIhC,CAq3BcK,CAAMX,EAAS1I,EAAM8I,SAAU9I,EAAM+I,QAAS/I,EAAMgJ,SAEtD,YADAtO,EAAOyO,gBAAgBG,EAAAA,YAAatJ,GAGtC,GAv3BV,SACE0I,EACAI,EACAC,EACAC,GAEA,OAAIF,GAGY,KAAZJ,IACKO,EAAAA,GAAWF,EAAUC,EAIhC,CAy2BcO,CAAQb,EAAS1I,EAAM8I,SAAU9I,EAAM+I,QAAS/I,EAAMgJ,SAExD,YADAtO,EAAOyO,gBAAgBK,EAAAA,cAAexJ,EAG1C,CACA,GAAIA,EAAM+I,SAAW/I,EAAMgJ,SAAWhJ,EAAMyJ,OAC1C,OAEF,MAAM1N,EAAOC,EAAQN,EAAMmK,EAAuBjK,GAClD2M,EAAoBxM,GACpBsI,GAAa,GACb4B,EAAmBnN,EAAS,EAM9B,OAHAqO,EAAI9G,iBAAiB,WAAYmI,GACjCrB,EAAI9G,iBAAiB,UAAWoI,GAEzB,KACLtB,EAAI7G,oBAAoB,WAAYkI,GACpCrB,EAAI7G,oBAAoB,UAAWmI,EAAc,CAErD,IACC,CACD9O,EACAe,EACAqH,EACArG,EACAmK,EACAjK,IAGF,MAAMsD,IAAkBmH,EAAAA,EAAAA,cACtB,CAAC1K,EAAKG,KACJL,EAAaC,EAAMC,EAAKC,EAAcjC,EAAYkC,GAAiBC,EAAG,GAExE,CAACF,EAAcjC,EAAY+B,EAAMG,KAG7B6N,IAAoBrD,EAAAA,EAAAA,cAAY,IACN,OAA1BR,GAAmC9D,GAO5BC,GACTnG,IAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAUiF,aACVjF,EAAUkF,QAAQ,KAGf,IAbL1C,GAAgB,CAAC2G,KAA0BG,IAAkB,KAC3D,MAAM/E,GAAO5G,EAAAA,EAAAA,YACb4G,EAAKC,QACLD,EAAKE,QAAOC,EAAAA,EAAAA,wBAAuB,KAE9B,IASR,CACDW,EACAC,EACA6D,EACAG,EACA9G,GACArD,KAkkBF,IA/jBA4D,EAAAA,EAAAA,YAAU,KACR,MAAMrG,EAAY0L,EAASnF,QAC3B,GAAkB,OAAdvG,EACF,OAGF,MAAMuQ,EAAsBA,CAC1B3J,EACA4J,EACAC,EACAC,KAEA,MAAMC,EACJ/J,aAAiBgK,cAAgB,KAAOhK,EAAM+J,cAGhD,GAFA/J,EAAM2I,iBAEe,MAAjBoB,EACFA,EAAcE,QAAQ,YAAaL,GACnCG,EAAcE,QAAQ,aAAcH,GACpCC,EAAcE,QAAQ,+BAAgCJ,OACjD,CACL,MAAMK,EAAYC,UAAUD,UAC5B,GAAiB,MAAbA,EAAmB,CAGrB,MAAME,EAAO,CACX,IAAIC,cAAc,CAChB,YAAa,IAAIC,KAAK,CAACV,GAAa,CAClC5I,KAAM,iBAIZkJ,EAAUK,MAAMH,EAClB,CACF,GAGII,EAAoBC,MACxBV,EACA/I,KAEA,IACE,OAAO+I,aAAyBW,aAC5BX,EAAcY,QAAQ3J,GACtB+I,aAAyBM,0BACVN,EAAca,QAAQ5J,IAAO6J,OAC1C,EACR,CAAE,MACA,MAAO,EACT,GAuJIC,EAAiB9K,IACrB,MAAM+K,EAAa5G,EAAcxE,QACjC,GAC4B,OAA1BkG,GACe,OAAflM,GACe,OAAfoR,EACA,CACA,MAAMnN,EAAOb,EACX8I,EACAkF,EACAnP,GAEF,GAAa,OAATgC,EACF,OAEF,MAAMoN,GAAMC,EAAAA,EAAAA,IAAuBvP,EAAMkC,GACnCgM,EAAaoB,EAAIE,UACjBpB,EAAkBkB,EAAIG,UACtBC,EAAgB1Q,EAAO+B,iBAAiBvC,MAAK,KAC/BoM,EAAAA,EAAAA,eAAc5C,GACf2H,eAEnBD,EAAc1P,KAvhCtB,SACEA,EACAkC,GAEA,MAAM,OAACR,EAAM,KAAEM,EAAI,KAAEH,EAAI,OAAEE,GAAUG,EAC/B0N,EAAU,GAEhB,IAAK,IAAI1O,EAAIa,EAAQb,GAAKc,EAAMd,IAAK,CACnC,MAAM2O,EAAM7P,EAAKkB,GACX4O,GAASC,EAAAA,EAAAA,KACf,IAAK,IAAI9O,EAAIS,EAAQT,GAAKY,EAAMZ,IAAK,CACnC,MAAM+O,EAAY,IAAIH,EAAIzN,MAAMnB,IAChC+O,EAAUrS,IAAKsS,EAAAA,EAAAA,MACfH,EAAO1N,MAAMD,KAAK6N,EACpB,CACAJ,EAAQzN,KAAK2N,EACf,CACA,OAAOF,CACT,CAqgC6BM,CAAqBlQ,EAAMkC,GAChD,MAAMiO,EAAc,CAClBC,UAAWnS,EAAWoS,QAAQD,UAC9BpN,MAAO,CAAC0M,IAEJvB,EAAgBtN,KAAKC,UAAUqP,GACrClC,EAAoB3J,EAAO4J,EAAYC,EAAeC,EACxD,GAsBIkC,EAAaA,CAAChM,EAAOiM,KACzB,MAAMC,GAAYtD,EAAAA,EAAAA,iBAClB,OAC4B,OAA1B/C,IACC9D,GACa,OAAdmK,GACAD,IAAiBvR,IAEc,IAA3BsL,EAAgBxE,OAjFCxB,KACvB,GAA8B,OAA1B6F,GAAiD,OAAflM,EAAqB,CACzD,MACMsC,EADOD,EAAQN,EAAMmK,EAAuBjK,GAChCK,KACZ2N,EAAa7P,EAAAA,GAAcC,IAAIiC,IAAS,KAC9C,GAAmB,OAAf2N,EACF,OAEF,MAAMhQ,EAAcD,EAAWE,iBAAiBoC,GAC1C6N,EAAkBlQ,EAAYM,MAAK,KACvCG,EAAAA,EAAAA,YAAWC,mBAEPuP,EAAgBjQ,EAAYM,MAAK,IAC9BqC,KAAKC,WACV2P,EAAAA,EAAAA,gCAA+BxS,EAAY,SAI/CgQ,EAAoB3J,EAAO4J,EAAYC,EAAeC,EACxD,GA+DIsC,CAAgBpM,GAEhB8K,EAAc9K,IAET,EAEG,EAGd,OAAOqM,EAAAA,EAAAA,eACL3R,EAAO4R,gBACLC,EAAAA,eACCC,IACC,MAAMN,GAAYtD,EAAAA,EAAAA,iBAClB,SAAI6D,EAAAA,EAAAA,kBAAiBP,EAGT,GAEdQ,EAAAA,sBAEFhS,EAAO4R,gBACL9C,EAAAA,eAlDgBmD,CAClB3M,EACAiM,KAEA,MAAMC,GAAYtD,EAAAA,EAAAA,iBAClB,OAC4B,OAA1B/C,IACC9D,GACa,OAAdmK,GACAD,IAAiBvR,IA7LA+P,WACnB,IAAIV,GACD/J,aAAiB4M,WAAa,KAAO5M,EAAM+J,gBAAkB,KAEhE,GAA8B,OAA1BlE,GAAiD,OAAflM,EAAqB,CAGzD,GAFAqG,EAAM2I,iBAEgB,OAAlBoB,EACF,IAEEA,SADoBI,UAAUD,UAAUhQ,QAClB,EACxB,CAAE,MACA,CAGJ,MAAM2P,EACc,OAAlBE,QACUS,EACNT,EACA,gCAEA,GAEN,GAAIF,EACF,IACE,MAAM2C,EAAUjQ,KAAKsQ,MAAMhD,GAC3B,GACE2C,EAAQV,YAAcpR,EAAOqR,QAAQD,WACrCgB,MAAMC,QAAQP,EAAQ9N,OAsBtB,YApBAjD,EACEC,EACA,CAACmK,GACDjK,EACAjC,EACAkC,IACA,KACE,MAAMoF,GAAO5G,EAAAA,EAAAA,YACb4G,EAAKC,QACLD,EAAKE,QAAOC,EAAAA,EAAAA,yBACZH,EAAK+L,YACL,MAAMtO,GAAQuO,EAAAA,EAAAA,mCACZT,EAAQ9N,OAEJwO,GAAMtE,EAAAA,EAAAA,kBACRuE,EAAAA,EAAAA,mBAAkBD,KACpBE,EAAAA,EAAAA,uBAAsBzT,EAAY+E,EAAOwO,EAC3C,GAMR,CAAE,MAAO,CAEX,MAAMtD,EACc,OAAlBG,QACUS,EAAkBT,EAAe,aACvC,GAEN,GAAIH,EACF,IACE,MACMoB,GADS,IAAIqC,WACAC,gBAAgB1D,EAAY,aACzC2D,EAAuBvC,EAAIzR,cAAc,SAE/C,GAA4B,MAAxBgU,EAA8B,CAChC,MAAMC,GAAYC,EAAAA,EAAAA,IAAoBF,GAMtC,YALA1R,IAAiBa,IACf,MAAOC,EAAGC,GAAKhB,EAAa5B,IAAI6L,IAChChJ,EAAAA,EAAAA,eAAc,gBACdH,EAAUgR,UAAU/Q,EAAGC,EAAG4Q,EAAU,GAGxC,CAmBA,YAlBA/R,EACEC,EACA,CAACmK,GACDjK,EACAjC,EACAkC,IACA,KACE,MAAMoF,GAAO5G,EAAAA,EAAAA,YACb4G,EAAKC,QACLD,EAAKE,QAAOC,EAAAA,EAAAA,yBACZH,EAAK+L,YACL,MAAMtO,GAAQiP,EAAAA,EAAAA,uBAAsBjT,EAAQsQ,GACtCkC,GAAMtE,EAAAA,EAAAA,kBACRuE,EAAAA,EAAAA,mBAAkBD,KACpBE,EAAAA,EAAAA,uBAAsBzT,EAAY+E,EAAOwO,EAC3C,GAKN,CAAE,MAAO,CAKX,MAAMrC,EACc,OAAlBd,QACUS,EAAkBT,EAAe,cACvC,GAEM,MAARc,GACFpP,EACEC,EACA,CAACmK,GACDjK,EACAjC,EACAkC,IACA,KACE,MAAMoF,GAAO5G,EAAAA,EAAAA,YACb4G,EAAKC,QACLD,EAAK+L,YACL,MAAME,GAAMtE,EAAAA,EAAAA,iBACA,OAARsE,GACFA,EAAIU,cAAc/C,EACpB,GAIR,GAoEEgD,CAAa7N,GACb2E,EAAahF,SAAU,EACvBsG,EAAmBnN,IACZ,EAEG,GAoCV4T,EAAAA,sBAEFhS,EAAO4R,gBACLlD,EAAAA,aACA4C,EACAU,EAAAA,sBAEFhS,EAAO4R,gBACLhD,EAAAA,aACA,CAACtJ,EAAOiM,MACFD,EAAWhM,EAAOiM,KACpBvC,MACO,IAIXgD,EAAAA,sBAEFhS,EAAO4R,gBACLwB,EAAAA,sBACApE,GACAgD,EAAAA,sBAEFhS,EAAO4R,gBACLyB,EAAAA,mBACArE,GACAgD,EAAAA,sBAEFhS,EAAO4R,gBACL0B,EAAAA,qBACCxB,GAC+B,OAA1B3G,IAAmC9D,IACrCtG,EACEC,EACA,CAACmK,KAA0BG,GAC3BpK,EACAjC,EACAkC,IACA,MAl0Cd,WACE,MAAMqR,GAAMe,EAAAA,EAAAA,yBAEZ,OADAf,EAAI1T,MAAMe,IAAI,QAAQF,EAAAA,EAAAA,YAAW6T,kBAAmB,WAC7ChB,CACT,EA+zC4BiB,GACRC,WAAW5B,EAAQ,KAGpB,IAIXE,EAAAA,sBAEFhS,EAAO4R,gBACL+B,EAAAA,mBACA,CAACrO,EAAOsO,KACN,MAAMpC,GAAYtD,EAAAA,EAAAA,iBAClB,GAC4B,OAA1B/C,IACC9D,IACD0K,EAAAA,EAAAA,kBAAiBP,IACjBA,EAAUqC,IAAI7K,IACkB,IAAhCwI,EAAUsC,WAAWhN,QACrB8M,IAAiB5T,EACjB,CACA,MAAM+T,EAAc/S,EAAK,GAAGoC,MAAM,GAAGzE,GAMrC,OALAyM,EAAyB2I,GACzBtV,EAAUC,EAAWqV,GACrBzO,EAAM2I,iBACN3I,EAAMG,kBACN0D,KACO,CACT,CACA,OAAO,CAAK,GAEd6I,EAAAA,sBAEFhS,EAAO4R,gBACLoC,EAAAA,iBACC1O,IACC,MAAMkM,GAAYtD,EAAAA,EAAAA,iBAClB,IACG7G,GACa,OAAdmK,GAC0B,OAA1BrG,EACA,CACA,MAAM8I,EAAa3O,EAAM8I,UAClBnM,EAAGC,GAAKhB,EAAa5B,IAAI6L,GAChC7F,EAAM2I,iBACN,IAAIiG,EAAQ,KACRC,EAAQ,KAkBZ,GAjBU,IAANlS,GAAWgS,EACH,IAAN/R,IACFiS,EAAQjS,EAAI,EACZgS,EAAQlT,EAAKmT,GAAO/Q,MAAM0D,OAAS,GAE5B7E,IAAMjB,EAAKkB,GAAGkB,MAAM0D,OAAS,GAAMmN,EAKlCA,GAIVC,EAAQjS,EAAI,EACZkS,EAAQjS,IAJRgS,EAAQjS,EAAI,EACZkS,EAAQjS,GANJA,IAAMlB,EAAK8F,OAAS,IACtBqN,EAAQjS,EAAI,EACZgS,EAAQ,GASE,OAAVA,GAA4B,OAAVC,EAEpB,OADArI,GAAoBoI,EAAOC,GAAO,IAC3B,CAEX,CACA,OAAO,CAAK,GAEdnC,EAAAA,sBAEFhS,EAAO4R,gBACLwC,EAAAA,sBACA,CAAC9O,EAAOsO,KACN,MAAMpC,GAAYtD,EAAAA,EAAAA,iBAClB,IAAK7G,GAA2B,OAAdmK,EAAoB,CACpC,MAAMzF,EAASzG,EAAM8I,SACfjK,EAAS4H,GACXtC,EAAcxE,SACdkG,EACJ,GAAe,OAAXhH,EAAiB,CACnB,MAAOlC,EAAGC,GAAKhB,EAAa5B,IAAI6E,GAChC,GAAU,IAANjC,EAEF,OADA4J,GAAoB7J,EAAGC,EAAI,EAAG6J,IACvB,CAEX,CACF,CACA,UAAK0G,EAAAA,EAAAA,mBAAkBjB,IAAcoC,IAAiB3U,QAIpDuS,EAAU6C,eAIkB,OAH5B7C,EAAU8C,OACPC,UACAC,4BACAC,wBAEHnP,EAAM2I,kBACC,GAEG,GAEd+D,EAAAA,sBAEFhS,EAAO4R,gBACL8C,EAAAA,wBACA,CAACpP,EAAOsO,KACN,MAAMpC,GAAYtD,EAAAA,EAAAA,iBAClB,IAAK7G,GAA2B,OAAdmK,EAAoB,CACpC,MAAMzF,EAASzG,EAAM8I,SACfjK,EAAS4H,GACXtC,EAAcxE,SACdkG,EACJ,GAAe,OAAXhH,EAAiB,CACnB,MAAOlC,EAAGC,GAAKhB,EAAa5B,IAAI6E,GAChC,GAAIjC,IAAMlB,EAAK8F,OAAS,EAEtB,OADAgF,GAAoB7J,EAAGC,EAAI,EAAG6J,IACvB,CAEX,CACF,CACA,UAAK0G,EAAAA,EAAAA,mBAAkBjB,IAAcoC,IAAiB3U,QAIpDuS,EAAU6C,eAIc,OAHxB7C,EAAU8C,OACPC,UACAC,4BACAG,oBAEHrP,EAAM2I,kBACC,GAEG,GAEd+D,EAAAA,sBAEFhS,EAAO4R,gBACLgD,EAAAA,wBACA,CAACtP,EAAOsO,KACN,MAAMpC,GAAYtD,EAAAA,EAAAA,iBAClB,IAAK7G,GAA2B,OAAdmK,EAAoB,CACpC,MAAMzF,EAASzG,EAAM8I,SACfjK,EAAS4H,GACXtC,EAAcxE,SACdkG,EACJ,GAAe,OAAXhH,EAAiB,CACnB,MAAOlC,EAAGC,GAAKhB,EAAa5B,IAAI6E,GAChC,GAAU,IAANlC,EAEF,OADA6J,GAAoB7J,EAAI,EAAGC,EAAG6J,IACvB,CAEX,CACF,CACA,UAAK0G,EAAAA,EAAAA,mBAAkBjB,IAAcoC,IAAiB3U,QAGlDuS,EAAU6C,eAA6C,IAA5B7C,EAAU8C,OAAOO,UAC9CvP,EAAM2I,kBACC,GAEG,GAEd+D,EAAAA,sBAEFhS,EAAO4R,gBACLkD,EAAAA,yBACA,CAACxP,EAAOsO,KACN,MAAMpC,GAAYtD,EAAAA,EAAAA,iBAClB,IAAK7G,GAA2B,OAAdmK,EAAoB,CACpC,MAAMzF,EAASzG,EAAM8I,SACfjK,EAAS4H,GACXtC,EAAcxE,SACdkG,EACJ,GAAe,OAAXhH,EAAiB,CACnB,MAAOlC,EAAGC,GAAKhB,EAAa5B,IAAI6E,GAChC,GAAIlC,IAAMjB,EAAKkB,GAAGkB,MAAM0D,OAAS,EAE/B,OADAgF,GAAoB7J,EAAI,EAAGC,EAAG6J,IACvB,CAEX,CACF,CACA,KAAK0G,EAAAA,EAAAA,mBAAkBjB,IAAcoC,IAAiB3U,EACpD,OAAO,EAET,GAAIuS,EAAU6C,cAAe,CAC3B,MAAMC,EAAS9C,EAAU8C,OACzB,GACmB,SAAhBA,EAAOhO,MACNgO,EAAOO,SAAWP,EAAOC,UAAUQ,sBACpB,YAAhBT,EAAOhO,MACNgO,EAAOO,SAAWP,EAAOC,UAAUf,kBAGrC,OADAlO,EAAM2I,kBACC,CAEX,CACA,OAAO,CAAK,GAEd+D,EAAAA,sBAEFhS,EAAO4R,gBACLoD,EAAAA,oBACA,CAAC1P,EAAOsO,KACN,MAAMpC,GAAYtD,EAAAA,EAAAA,iBAClB,OAAK7G,GAA2B,OAAdmK,GAAsBoC,IAAiB5T,KAMpDyS,EAAAA,EAAAA,mBAAkBjB,OAGnBnK,IACF4E,KACAtC,GAAa,GACiB,OAA1BwB,GACFgB,YAAW,KACT1N,EAAUC,EAAWyM,EAAsB,GAC1C,KAEE,KAhBPjC,GAAY,GACZkC,EAAyB,MACzBc,MACO,EAeG,GAEd8F,EAAAA,sBAEH,GACA,CACD9Q,EACAjC,EACA+P,GACA7F,EACAnJ,EACAqH,EACAyE,GACA9C,EACAmC,EACAnK,EACAiL,GACAC,GACAZ,EACApC,EACA/H,KAGiB,OAAflC,EAIJ,OACE4G,EAAAA,EAAAA,MAAA,OAAKX,MAAO,CAAC+P,SAAU,YAAY/Q,SAAA,EACjCP,EAAAA,EAAAA,KAAA,SACEmC,UAAS,GAAAvH,OAAKD,EAAM4W,MAAK,KAAA3W,OAAI+I,EAAahJ,EAAM6W,cAAgB,IAChEpP,IAAKqE,EACLjC,UAAW,EAAEjE,UACbP,EAAAA,EAAAA,KAAA,SAAAO,SACGlD,EAAKsJ,KAAKuG,IACTlN,EAAAA,EAAAA,KAAA,MAAiBmC,UAAWxH,EAAM8W,SAASlR,SACxC2M,EAAIzN,MAAMkH,KAAKjJ,IACd,MAAM,GAAC1C,GAAM0C,EACb,OACEsC,EAAAA,EAAAA,KAACwD,EAAS,CAER9F,KAAMA,EACN/C,MAAOA,EACPgJ,WAAYkE,EAAgBqI,IAAIlV,GAChC4I,kBAAmB4D,IAA0BxM,EAC7C0I,UAAWA,EACX1C,eAAgBA,EAChB1F,WAAYA,EACZuF,gBAAiBA,GACjBrD,gBAAiBA,GACjBD,aAAcA,EACdF,KAAMA,EACN0D,kBAAmBA,GAZd/F,EAaL,KAlBCkS,EAAIlS,UAyBlBiL,IACCjG,EAAAA,EAAAA,KAAA,UAAQmC,UAAWxH,EAAM+W,gBAAiBjP,QA18B7BkP,KACjBnU,IAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAUsT,WAAW,EAAE,GACvB,IAw8BCxL,IACCnG,EAAAA,EAAAA,KAAA,UACEmC,UAAWxH,EAAMiX,aACjBnP,QAx8BQoP,KACdrU,IAAiBa,KACfG,EAAAA,EAAAA,eAAc,gBACdH,EAAUwT,QAAQ,EAAE,GACpB,EAq8BIzP,IAAKyD,IAGO,OAAfU,IACCvG,EAAAA,EAAAA,KAAA,OAAKmC,UAAWxH,EAAMmX,iBAAkB1P,IAAK2D,MAIrD,C,iBCtrDA,MAAMgM,EAAyHC,EAAQ,MACvIC,EAAOC,QAAUH,C,iBCFJ,IAAI9K,EAAE+K,EAAQ,MAC3B,IAAIG,EAAE,CAAC,CAAC,MAAM,mBAAmB,CAAC,MAAM,kBAAkB,CAAC,SAAS,kBAAkB,CAAC,OAAO,kBAAkB,CAAC,MAAM,mBAAmB,CAAC,WAAW,iBAAiB,CAAC,SAAS,kBAAkB,CAAC,WAAW,mBAAmB,CAAC,OAAO,oBAAoB,CAAC,QAAQ,kBAAkB,CAAC,UAAU,kBAAkB,CAAC,QAAQ,kBAAkB,CAAC,OAAO,oBAAoB,CAAC,MAAM,oBAAoB,CAAC,OAAO,oBAAoB,CAAC,QAAQ,qBAAqBC,EAAED,EAAEnT,KAAKqT,MAAMrT,KAAKsT,SAASH,EAAEhP,SAASb,EAAE2E,EAAEsL,cAAc,CAACC,SAAS,EACtgBC,MAAML,EAAE,GAAGM,gBAAe,EAAGC,KAAKP,EAAE,GAAGQ,UAAU,IAAIhM,MAAMsL,EAAQW,qBAAqBvQ,EAAE4P,EAAQY,wBAAwB,SAASC,EAAEC,GAAG,IAAIhM,EAAEC,EAAEnH,WAAWwC,GAA4C,OAAzC,MAAMyQ,IAAI/L,EAAE2L,KAAKI,GAAG,MAAMC,IAAIhM,EAAEyL,MAAMO,GAAUhM,CAAC,C,iBCD/M,MAAM/G,EAA6G+R,EAAQ,MAC3HC,EAAOC,QAAUjS,C,iBCFJ,IAAImS,EAAEJ,EAAQ,MAA8CiB,EAAEjB,EAAQ,MAAyCkB,EAAElB,EAAQ,MACtIE,EAAQjS,sBAAsB,SAAAN,GAAuF,IAA7EO,cAAc8G,EAAEzG,SAAS4S,EAAE/S,aAAakC,EAAEnC,aAAaiT,EAAE9S,iBAAiB+S,GAAE1T,EAAM2T,EAAEJ,EAAEhS,QAAO,GAAIqS,EAAEL,EAAEpT,WAAWmT,EAAEO,wBAAwB,MAAMD,GADzC,SAAWvM,GAAG,IAAImM,EAAE,IAAIM,gBAAgBN,EAAErQ,OAAO,OAAOkE,GAAG,IAAI,IAAI1E,EAAE,EAAEA,EAAEoR,UAAUvQ,OAAOb,IAAI6Q,EAAErQ,OAAO,IAAI4Q,UAAUpR,IAAI,MAAMqR,MAAM,2BAAA/Y,OAA2BoM,EAAC,2CAAApM,OAA0CuY,EAAC,6BAA4B,wFAAyF,CACrRS,CAAE,GAAG,IAAKb,GAAGc,SAASC,IAAIP,EAAEhV,EAAE2U,EAAExM,SAAQ,KAAK,IAAIO,EAAEmM,GAAGU,UAAK,EAAO,MAAMxV,EAAE2U,EAAEc,6BAA6BR,EAAEtM,GAAqD,QAAlD,IAASA,IAAID,EAAE0G,QAAQ/S,MAAMsM,GAAGD,EAAEgN,cAAcjB,EAAKzQ,EAAE,IAAI,IAAI6P,KAAK7P,EAAE,CAAC,IAAI0Q,EAAE/L,EAAE,KAAK,oBAAoBkL,IAAQA,GAAJa,EAAEb,GAAM8B,QAAQhN,EAAE+L,EAAEkB,KAAKlB,EAAEA,EAAEmB,WAAW,MAAM,MAAMC,EAAEpN,EAAEqN,OAAO1Y,IAAIwW,EAAE5F,WAAWvF,EAAEqN,OAAOnY,IAAIiW,EAAE5F,UACpf,CAAC+H,UAAUF,EAAEA,EAAEE,eAAU,EAAOC,MAAMpC,EAAE8B,QAAQhN,EAAEuN,iBAAiBxB,EAAEyB,WAAW,IAAI3M,KAAK,KAAK,CAACqK,EAAEnL,EAAEqN,OAAO,IAAIzN,IAAImM,EAAEsB,QAAQ,IAAI,MAAOD,EAAEM,KAAKvC,EAAEnL,EAAEqN,OAAOnY,IAAIkY,EAAE,CAACE,UAAUI,EAAEJ,UAAUC,MAAMG,EAAEH,MAAMN,QAAQS,EAAET,QAAQO,iBAAiBE,EAAEF,iBAAiBC,WAAW,IAAI3M,KAAK,CAAiE,OAAhEd,EAAE0G,QAAQD,UAAUsF,EAAErF,QAAQD,UAAUzG,EAAE2N,UAAU5B,EAAE4B,UAAgB,CAAC3N,EAAE1I,EAAE,GAAE,KAAKoU,eAAekC,EAAEhC,UAAUiC,GAAGzC,EAAEU,0BAA0BgC,EAAEzB,GAAGC,EAAEhS,SAASuT,EAAE3E,IAAIlJ,EAAE+N,UAC1X,OADoY7B,EAAE9R,WAAU,KAAK0T,IAAIxB,EAAEhS,SAAQ,EAAG,GAAE,CAACwT,IAAI5B,EAAE9R,WAAU,IAClf2R,EAAEiC,0BAAyB/N,IAAID,EAAEiO,YAAYhO,EAAE,KAAG,CAACD,EAAE+L,IAAWG,EAAEgC,cAAcjC,EAAEO,uBAAuB2B,SAAS,CAACC,MAAM7W,IAAIqW,GAAGE,EAAE3B,EAAE,KAAK,C","sources":["components/Editor/nodes/TableComponent.js","../node_modules/@lexical/react/LexicalCollaborationContext.js","../node_modules/@lexical/react/LexicalCollaborationContext.prod.js","../node_modules/@lexical/react/LexicalNestedComposer.js","../node_modules/@lexical/react/LexicalNestedComposer.prod.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nimport {\r\n  $generateJSONFromSelectedNodes,\r\n  $generateNodesFromSerializedNodes,\r\n  $insertGeneratedNodes,\r\n} from '@lexical/clipboard'\r\nimport {$generateHtmlFromNodes, $generateNodesFromDOM} from '@lexical/html'\r\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext'\r\nimport {LexicalNestedComposer} from '@lexical/react/LexicalNestedComposer'\r\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection'\r\nimport {mergeRegister} from '@lexical/utils'\r\nimport {\r\n  $addUpdateTag,\r\n  $createParagraphNode,\r\n  $createRangeSelection,\r\n  $getNodeByKey,\r\n  $getRoot,\r\n  $getSelection,\r\n  $isNodeSelection,\r\n  $isRangeSelection,\r\n  CLICK_COMMAND,\r\n  COMMAND_PRIORITY_LOW,\r\n  COPY_COMMAND,\r\n  createEditor,\r\n  CUT_COMMAND,\r\n  EditorThemeClasses,\r\n  FORMAT_TEXT_COMMAND,\r\n  KEY_ARROW_DOWN_COMMAND,\r\n  KEY_ARROW_LEFT_COMMAND,\r\n  KEY_ARROW_RIGHT_COMMAND,\r\n  KEY_ARROW_UP_COMMAND,\r\n  KEY_BACKSPACE_COMMAND,\r\n  KEY_DELETE_COMMAND,\r\n  KEY_ENTER_COMMAND,\r\n  KEY_ESCAPE_COMMAND,\r\n  KEY_TAB_COMMAND,\r\n  LexicalEditor,\r\n  NodeKey,\r\n  PASTE_COMMAND,\r\n} from 'lexical'\r\nimport {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react'\r\nimport {createPortal} from 'react-dom'\r\nimport {IS_APPLE} from '../utils/environment'\r\n\r\nimport {CellContext} from '../plugins/TablePlugin'\r\nimport {\r\n  $isTableNode,\r\n  Cell,\r\n  cellHTMLCache,\r\n  cellTextContentCache,\r\n  createRow,\r\n  createUID,\r\n  exportTableCellsToHTML,\r\n  extractRowsFromHTML,\r\n  Rows,\r\n  TableNode,\r\n} from './TableNode'\r\n\r\nconst NO_CELLS = []\r\n\r\nfunction $createSelectAll() {\r\n  const sel = $createRangeSelection()\r\n  sel.focus.set('root', $getRoot().getChildrenSize(), 'element')\r\n  return sel\r\n}\r\n\r\nfunction createEmptyParagraphHTML(theme) {\r\n  return `<p class=\"${theme.paragraph}\"><br></p>`\r\n}\r\n\r\nfunction focusCell(tableElem, id) {\r\n  const cellElem = tableElem.querySelector(`[data-id=${id}]`)\r\n  if (cellElem == null) {\r\n    return\r\n  }\r\n  cellElem.focus()\r\n}\r\n\r\nfunction isStartingResize(target) {\r\n  return target.nodeType === 1 && target.hasAttribute('data-table-resize')\r\n}\r\n\r\nfunction generateHTMLFromJSON(\r\n  editorStateJSON,\r\n  cellEditor,\r\n) {\r\n  const editorState = cellEditor.parseEditorState(editorStateJSON)\r\n  let html = cellHTMLCache.get(editorStateJSON)\r\n  if (html === undefined) {\r\n    html = editorState.read(() => $generateHtmlFromNodes(cellEditor, null))\r\n    const textContent = editorState.read(() => $getRoot().getTextContent())\r\n    cellHTMLCache.set(editorStateJSON, html)\r\n    cellTextContentCache.set(editorStateJSON, textContent)\r\n  }\r\n  return html\r\n}\r\n\r\nfunction getCurrentDocument(editor) {\r\n  const rootElement = editor.getRootElement()\r\n  return rootElement !== null ? rootElement.ownerDocument : document\r\n}\r\n\r\nfunction isCopy(\r\n  keyCode,\r\n  shiftKey,\r\n  metaKey,\r\n  ctrlKey,\r\n) {\r\n  if (shiftKey) {\r\n    return false\r\n  }\r\n  if (keyCode === 67) {\r\n    return IS_APPLE ? metaKey : ctrlKey\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction isCut(\r\n  keyCode,\r\n  shiftKey,\r\n  metaKey,\r\n  ctrlKey,\r\n) {\r\n  if (shiftKey) {\r\n    return false\r\n  }\r\n  if (keyCode === 88) {\r\n    return IS_APPLE ? metaKey : ctrlKey\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction isPaste(\r\n  keyCode,\r\n  shiftKey,\r\n  metaKey,\r\n  ctrlKey,\r\n) {\r\n  if (shiftKey) {\r\n    return false\r\n  }\r\n  if (keyCode === 86) {\r\n    return IS_APPLE ? metaKey : ctrlKey\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction getCellID(domElement) {\r\n  let node = domElement\r\n  while (node !== null) {\r\n    const possibleID = node.getAttribute('data-id')\r\n    if (possibleID != null) {\r\n      return possibleID\r\n    }\r\n    node = node.parentElement\r\n  }\r\n  return null\r\n}\r\n\r\nfunction getTableCellWidth(domElement) {\r\n  let node = domElement\r\n  while (node !== null) {\r\n    if (node.nodeName === 'TH' || node.nodeName === 'TD') {\r\n      return node.getBoundingClientRect().width\r\n    }\r\n    node = node.parentElement\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction $updateCells(\r\n  rows,\r\n  ids,\r\n  cellCoordMap,\r\n  cellEditor,\r\n  updateTableNode,\r\n  fn,\r\n) {\r\n  for (const id of ids) {\r\n    const cell = getCell(rows, id, cellCoordMap)\r\n    if (cell !== null && cellEditor !== null) {\r\n      const editorState = cellEditor.parseEditorState(cell.json)\r\n      cellEditor._headless = true\r\n      cellEditor.setEditorState(editorState)\r\n      cellEditor.update(fn, {discrete: true})\r\n      cellEditor._headless = false\r\n      const newJSON = JSON.stringify(cellEditor.getEditorState())\r\n      updateTableNode((tableNode) => {\r\n        const [x, y] = cellCoordMap.get(id)\r\n        $addUpdateTag('history-push')\r\n        tableNode.updateCellJSON(x, y, newJSON)\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nfunction isTargetOnPossibleUIControl(target) {\r\n  let node = target\r\n  while (node !== null) {\r\n    const nodeName = node.nodeName\r\n    if (\r\n      nodeName === 'BUTTON' ||\r\n      nodeName === 'INPUT' ||\r\n      nodeName === 'TEXTAREA'\r\n    ) {\r\n      return true\r\n    }\r\n    node = node.parentElement\r\n  }\r\n  return false\r\n}\r\n\r\nfunction getSelectedRect(\r\n  startID,\r\n  endID,\r\n  cellCoordMap,\r\n) {\r\n  const startCoords = cellCoordMap.get(startID)\r\n  const endCoords = cellCoordMap.get(endID)\r\n  if (startCoords === undefined || endCoords === undefined) {\r\n    return null\r\n  }\r\n  const startX = Math.min(startCoords[0], endCoords[0])\r\n  const endX = Math.max(startCoords[0], endCoords[0])\r\n  const startY = Math.min(startCoords[1], endCoords[1])\r\n  const endY = Math.max(startCoords[1], endCoords[1])\r\n\r\n  return {\r\n    endX,\r\n    endY,\r\n    startX,\r\n    startY,\r\n  }\r\n}\r\n\r\nfunction getSelectedIDs(\r\n  rows,\r\n  startID,\r\n  endID,\r\n  cellCoordMap,\r\n) {\r\n  const rect = getSelectedRect(startID, endID, cellCoordMap)\r\n  if (rect === null) {\r\n    return []\r\n  }\r\n  const {startX, endY, endX, startY} = rect\r\n  const ids = []\r\n\r\n  for (let x = startX; x <= endX; x++) {\r\n    for (let y = startY; y <= endY; y++) {\r\n      ids.push(rows[y].cells[x].id)\r\n    }\r\n  }\r\n  return ids\r\n}\r\n\r\nfunction extractCellsFromRows(\r\n  rows,\r\n  rect,\r\n) {\r\n  const {startX, endY, endX, startY} = rect\r\n  const newRows = []\r\n\r\n  for (let y = startY; y <= endY; y++) {\r\n    const row = rows[y]\r\n    const newRow = createRow()\r\n    for (let x = startX; x <= endX; x++) {\r\n      const cellClone = {...row.cells[x]}\r\n      cellClone.id = createUID()\r\n      newRow.cells.push(cellClone)\r\n    }\r\n    newRows.push(newRow)\r\n  }\r\n  return newRows\r\n}\r\n\r\nfunction TableCellEditor({cellEditor}) {\r\n  const {cellEditorConfig, cellEditorPlugins} = useContext(CellContext)\r\n\r\n  if (cellEditorPlugins === null || cellEditorConfig === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <LexicalNestedComposer\r\n      initialEditor={cellEditor}\r\n      initialTheme={cellEditorConfig.theme}\r\n      initialNodes={cellEditorConfig.nodes}\r\n      skipCollabChecks={true}>\r\n      {cellEditorPlugins}\r\n    </LexicalNestedComposer>\r\n  )\r\n}\r\n\r\nfunction getCell(\r\n  rows,\r\n  cellID,\r\n  cellCoordMap,\r\n) {\r\n  const coords = cellCoordMap.get(cellID)\r\n  if (coords === undefined) {\r\n    return null\r\n  }\r\n  const [x, y] = coords\r\n  const row = rows[y]\r\n  return row.cells[x]\r\n}\r\n\r\nfunction TableActionMenu({\r\n  cell,\r\n  rows,\r\n  cellCoordMap,\r\n  menuElem,\r\n  updateCellsByID,\r\n  onClose,\r\n  updateTableNode,\r\n  setSortingOptions,\r\n  sortingOptions,\r\n}) {\r\n  const dropDownRef = useRef<null | HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    const dropdownElem = dropDownRef.current\r\n    if (dropdownElem !== null) {\r\n      const rect = menuElem.getBoundingClientRect()\r\n      dropdownElem.style.top = `${rect.y}px`\r\n      dropdownElem.style.left = `${rect.x}px`\r\n    }\r\n  }, [menuElem])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      const dropdownElem = dropDownRef.current\r\n      if (\r\n        dropdownElem !== null &&\r\n        !dropdownElem.contains(event.target)\r\n      ) {\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n\r\n    window.addEventListener('click', handleClickOutside)\r\n    return () => window.removeEventListener('click', handleClickOutside)\r\n  }, [onClose])\r\n  const coords = cellCoordMap.get(cell.id)\r\n\r\n  if (coords === undefined) {\r\n    return null\r\n  }\r\n  const [x, y] = coords\r\n\r\n  return (\r\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\r\n    <div\r\n      className=\"dropdown\"\r\n      ref={dropDownRef}\r\n      onPointerMove={(e) => {\r\n        e.stopPropagation()\r\n      }}\r\n      onPointerDown={(e) => {\r\n        e.stopPropagation()\r\n      }}\r\n      onPointerUp={(e) => {\r\n        e.stopPropagation()\r\n      }}\r\n      onClick={(e) => {\r\n        e.stopPropagation()\r\n      }}>\r\n      <button\r\n        className=\"item\"\r\n        onClick={() => {\r\n          updateTableNode((tableNode) => {\r\n            $addUpdateTag('history-push')\r\n            tableNode.updateCellType(\r\n              x,\r\n              y,\r\n              cell.type === 'normal' ? 'header' : 'normal',\r\n            )\r\n          })\r\n          onClose()\r\n        }}>\r\n        <span className=\"text\">\r\n          {cell.type === 'normal' ? 'Make header' : 'Remove header'}\r\n        </span>\r\n      </button>\r\n      <button\r\n        className=\"item\"\r\n        onClick={() => {\r\n          updateCellsByID([cell.id], () => {\r\n            const root = $getRoot()\r\n            root.clear()\r\n            root.append($createParagraphNode())\r\n          })\r\n          onClose()\r\n        }}>\r\n        <span className=\"text\">Clear cell</span>\r\n      </button>\r\n      <hr />\r\n      {cell.type === 'header' && y === 0 && (\r\n        <>\r\n          {sortingOptions !== null && sortingOptions.x === x && (\r\n            <button\r\n              className=\"item\"\r\n              onClick={() => {\r\n                setSortingOptions(null)\r\n                onClose()\r\n              }}>\r\n              <span className=\"text\">Remove sorting</span>\r\n            </button>\r\n          )}\r\n          {(sortingOptions === null ||\r\n            sortingOptions.x !== x ||\r\n            sortingOptions.type === 'descending') && (\r\n            <button\r\n              className=\"item\"\r\n              onClick={() => {\r\n                setSortingOptions({type: 'ascending', x})\r\n                onClose()\r\n              }}>\r\n              <span className=\"text\">Sort ascending</span>\r\n            </button>\r\n          )}\r\n          {(sortingOptions === null ||\r\n            sortingOptions.x !== x ||\r\n            sortingOptions.type === 'ascending') && (\r\n            <button\r\n              className=\"item\"\r\n              onClick={() => {\r\n                setSortingOptions({type: 'descending', x})\r\n                onClose()\r\n              }}>\r\n              <span className=\"text\">Sort descending</span>\r\n            </button>\r\n          )}\r\n          <hr />\r\n        </>\r\n      )}\r\n      <button\r\n        className=\"item\"\r\n        onClick={() => {\r\n          updateTableNode((tableNode) => {\r\n            $addUpdateTag('history-push')\r\n            tableNode.insertRowAt(y)\r\n          })\r\n          onClose()\r\n        }}>\r\n        <span className=\"text\">Insert row above</span>\r\n      </button>\r\n      <button\r\n        className=\"item\"\r\n        onClick={() => {\r\n          updateTableNode((tableNode) => {\r\n            $addUpdateTag('history-push')\r\n            tableNode.insertRowAt(y + 1)\r\n          })\r\n          onClose()\r\n        }}>\r\n        <span className=\"text\">Insert row below</span>\r\n      </button>\r\n      <hr />\r\n      <button\r\n        className=\"item\"\r\n        onClick={() => {\r\n          updateTableNode((tableNode) => {\r\n            $addUpdateTag('history-push')\r\n            tableNode.insertColumnAt(x)\r\n          })\r\n          onClose()\r\n        }}>\r\n        <span className=\"text\">Insert column left</span>\r\n      </button>\r\n      <button\r\n        className=\"item\"\r\n        onClick={() => {\r\n          updateTableNode((tableNode) => {\r\n            $addUpdateTag('history-push')\r\n            tableNode.insertColumnAt(x + 1)\r\n          })\r\n          onClose()\r\n        }}>\r\n        <span className=\"text\">Insert column right</span>\r\n      </button>\r\n      <hr />\r\n      {rows[0].cells.length !== 1 && (\r\n        <button\r\n          className=\"item\"\r\n          onClick={() => {\r\n            updateTableNode((tableNode) => {\r\n              $addUpdateTag('history-push')\r\n              tableNode.deleteColumnAt(x)\r\n            })\r\n            onClose()\r\n          }}>\r\n          <span className=\"text\">Delete column</span>\r\n        </button>\r\n      )}\r\n      {rows.length !== 1 && (\r\n        <button\r\n          className=\"item\"\r\n          onClick={() => {\r\n            updateTableNode((tableNode) => {\r\n              $addUpdateTag('history-push')\r\n              tableNode.deleteRowAt(y)\r\n            })\r\n            onClose()\r\n          }}>\r\n          <span className=\"text\">Delete row</span>\r\n        </button>\r\n      )}\r\n      <button\r\n        className=\"item\"\r\n        onClick={() => {\r\n          updateTableNode((tableNode) => {\r\n            $addUpdateTag('history-push')\r\n            tableNode.selectNext()\r\n            tableNode.remove()\r\n          })\r\n          onClose()\r\n        }}>\r\n        <span className=\"text\">Delete table</span>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction TableCell({\r\n  cell,\r\n  cellCoordMap,\r\n  cellEditor,\r\n  isEditing,\r\n  isSelected,\r\n  isPrimarySelected,\r\n  theme,\r\n  updateCellsByID,\r\n  updateTableNode,\r\n  rows,\r\n  setSortingOptions,\r\n  sortingOptions,\r\n}) {\r\n  const [showMenu, setShowMenu] = useState(false)\r\n  const menuRootRef = useRef(null)\r\n  const isHeader = cell.type !== 'normal'\r\n  const editorStateJSON = cell.json\r\n  const CellComponent = isHeader ? 'th' : 'td'\r\n  const cellWidth = cell.width\r\n  const menuElem = menuRootRef.current\r\n  const coords = cellCoordMap.get(cell.id)\r\n  const isSorted =\r\n    sortingOptions !== null &&\r\n    coords !== undefined &&\r\n    coords[0] === sortingOptions.x &&\r\n    coords[1] === 0\r\n\r\n  useEffect(() => {\r\n    if (isEditing || !isPrimarySelected) {\r\n      setShowMenu(false)\r\n    }\r\n  }, [isEditing, isPrimarySelected])\r\n\r\n  return (\r\n    <CellComponent\r\n      className={`${theme.tableCell} ${isHeader ? theme.tableCellHeader : ''} ${\r\n        isSelected ? theme.tableCellSelected : ''\r\n      }`}\r\n      data-id={cell.id}\r\n      tabIndex={-1}\r\n      style={{width: cellWidth !== null ? cellWidth : undefined}}>\r\n      {isPrimarySelected && (\r\n        <div\r\n          className={`${theme.tableCellPrimarySelected} ${\r\n            isEditing ? theme.tableCellEditing : ''\r\n          }`}\r\n        />\r\n      )}\r\n      {isPrimarySelected && isEditing ? (\r\n        <TableCellEditor cellEditor={cellEditor} />\r\n      ) : (\r\n        <>\r\n          <div\r\n            dangerouslySetInnerHTML={{\r\n              __html:\r\n                editorStateJSON === ''\r\n                  ? createEmptyParagraphHTML(theme)\r\n                  : generateHTMLFromJSON(editorStateJSON, cellEditor),\r\n            }}\r\n          />\r\n          <div className={theme.tableCellResizer} data-table-resize=\"true\" />\r\n        </>\r\n      )}\r\n      {isPrimarySelected && !isEditing && (\r\n        <div className={theme.tableCellActionButtonContainer} ref={menuRootRef}>\r\n          <button\r\n            className={theme.tableCellActionButton}\r\n            onClick={(e) => {\r\n              setShowMenu(!showMenu)\r\n              e.stopPropagation()\r\n            }}>\r\n            <i className=\"chevron-down\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n      {showMenu &&\r\n        menuElem !== null &&\r\n        createPortal(\r\n          <TableActionMenu\r\n            cell={cell}\r\n            menuElem={menuElem}\r\n            updateCellsByID={updateCellsByID}\r\n            onClose={() => setShowMenu(false)}\r\n            updateTableNode={updateTableNode}\r\n            cellCoordMap={cellCoordMap}\r\n            rows={rows}\r\n            setSortingOptions={setSortingOptions}\r\n            sortingOptions={sortingOptions}\r\n          />,\r\n          document.body,\r\n        )}\r\n      {isSorted && <div className={theme.tableCellSortedIndicator} />}\r\n    </CellComponent>\r\n  )\r\n}\r\n\r\nexport default function TableComponent({\r\n  nodeKey,\r\n  rows: rawRows,\r\n  theme,\r\n}) {\r\n  const [isSelected, setSelected, clearSelection] =\r\n    useLexicalNodeSelection(nodeKey)\r\n  const resizeMeasureRef = useRef({\r\n    point: 0,\r\n    size: 0,\r\n  })\r\n  const [sortingOptions, setSortingOptions] = useState(\r\n    null,\r\n  )\r\n  const addRowsRef = useRef(null)\r\n  const lastCellIDRef = useRef(null)\r\n  const tableResizerRulerRef = useRef(null)\r\n  const {cellEditorConfig} = useContext(CellContext)\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [showAddColumns, setShowAddColumns] = useState(false)\r\n  const [showAddRows, setShowAddRows] = useState(false)\r\n  const [editor] = useLexicalComposerContext()\r\n  const mouseDownRef = useRef(false)\r\n  const [resizingID, setResizingID] = useState(null)\r\n  const tableRef = useRef(null)\r\n  const cellCoordMap = useMemo(() => {\r\n    const map = new Map()\r\n\r\n    for (let y = 0; y < rawRows.length; y++) {\r\n      const row = rawRows[y]\r\n      const cells = row.cells\r\n      for (let x = 0; x < cells.length; x++) {\r\n        const cell = cells[x]\r\n        map.set(cell.id, [x, y])\r\n      }\r\n    }\r\n    return map\r\n  }, [rawRows])\r\n  const rows = useMemo(() => {\r\n    if (sortingOptions === null) {\r\n      return rawRows\r\n    }\r\n    const _rows = rawRows.slice(1)\r\n    _rows.sort((a, b) => {\r\n      const aCells = a.cells\r\n      const bCells = b.cells\r\n      const x = sortingOptions.x\r\n      const aContent = cellTextContentCache.get(aCells[x].json) || ''\r\n      const bContent = cellTextContentCache.get(bCells[x].json) || ''\r\n      if (aContent === '' || bContent === '') {\r\n        return 1\r\n      }\r\n      if (sortingOptions.type === 'ascending') {\r\n        return aContent.localeCompare(bContent)\r\n      }\r\n      return bContent.localeCompare(aContent)\r\n    })\r\n    _rows.unshift(rawRows[0])\r\n    return _rows\r\n  }, [rawRows, sortingOptions])\r\n  const [primarySelectedCellID, setPrimarySelectedCellID] = useState(null)\r\n  const cellEditor = useMemo<null | LexicalEditor>(() => {\r\n    if (cellEditorConfig === null) {\r\n      return null\r\n    }\r\n    const _cellEditor = createEditor({\r\n      namespace: cellEditorConfig.namespace,\r\n      nodes: cellEditorConfig.nodes,\r\n      onError: (error) => cellEditorConfig.onError(error, _cellEditor),\r\n      theme: cellEditorConfig.theme,\r\n    })\r\n    return _cellEditor\r\n  }, [cellEditorConfig])\r\n  const [selectedCellIDs, setSelectedCellIDs] = useState([])\r\n  const selectedCellSet = useMemo(\r\n    () => new Set(selectedCellIDs),\r\n    [selectedCellIDs],\r\n  )\r\n\r\n  useEffect(() => {\r\n    const tableElem = tableRef.current\r\n    if (\r\n      isSelected &&\r\n      document.activeElement === document.body &&\r\n      tableElem !== null\r\n    ) {\r\n      tableElem.focus()\r\n    }\r\n  }, [isSelected])\r\n\r\n  const updateTableNode = useCallback(\r\n    (fn) => {\r\n      editor.update(() => {\r\n        const tableNode = $getNodeByKey(nodeKey)\r\n        if ($isTableNode(tableNode)) {\r\n          fn(tableNode)\r\n        }\r\n      })\r\n    },\r\n    [editor, nodeKey],\r\n  )\r\n\r\n  const addColumns = () => {\r\n    updateTableNode((tableNode) => {\r\n      $addUpdateTag('history-push')\r\n      tableNode.addColumns(1)\r\n    })\r\n  }\r\n\r\n  const addRows = () => {\r\n    updateTableNode((tableNode) => {\r\n      $addUpdateTag('history-push')\r\n      tableNode.addRows(1)\r\n    })\r\n  }\r\n\r\n  const modifySelectedCells = useCallback(\r\n    (x, y, extend) => {\r\n      const id = rows[y].cells[x].id\r\n      lastCellIDRef.current = id\r\n      if (extend) {\r\n        const selectedIDs = getSelectedIDs(\r\n          rows,\r\n          primarySelectedCellID,\r\n          id,\r\n          cellCoordMap,\r\n        )\r\n        setSelectedCellIDs(selectedIDs)\r\n      } else {\r\n        setPrimarySelectedCellID(id)\r\n        setSelectedCellIDs(NO_CELLS)\r\n        focusCell(tableRef.current, id)\r\n      }\r\n    },\r\n    [cellCoordMap, primarySelectedCellID, rows],\r\n  )\r\n\r\n  const saveEditorToJSON = useCallback(() => {\r\n    if (cellEditor !== null && primarySelectedCellID !== null) {\r\n      const json = JSON.stringify(cellEditor.getEditorState())\r\n      updateTableNode((tableNode) => {\r\n        const coords = cellCoordMap.get(primarySelectedCellID)\r\n        if (coords === undefined) {\r\n          return\r\n        }\r\n        $addUpdateTag('history-push')\r\n        const [x, y] = coords\r\n        tableNode.updateCellJSON(x, y, json)\r\n      })\r\n    }\r\n  }, [cellCoordMap, cellEditor, primarySelectedCellID, updateTableNode])\r\n\r\n  const selectTable = useCallback(() => {\r\n    setTimeout(() => {\r\n      const parentRootElement = editor.getRootElement()\r\n      if (parentRootElement !== null) {\r\n        parentRootElement.focus({preventScroll: true})\r\n        window.getSelection()?.removeAllRanges()\r\n      }\r\n    }, 20)\r\n  }, [editor])\r\n\r\n  useEffect(() => {\r\n    const tableElem = tableRef.current\r\n    if (tableElem === null) {\r\n      return\r\n    }\r\n    const doc = getCurrentDocument(editor)\r\n\r\n    const isAtEdgeOfTable = (event) => {\r\n      const x = event.clientX - tableRect.x\r\n      const y = event.clientY - tableRect.y\r\n      return x < 5 || y < 5\r\n    }\r\n\r\n    const handlePointerDown = (event) => {\r\n      const possibleID = getCellID(event.target)\r\n      if (\r\n        possibleID !== null &&\r\n        editor.isEditable() &&\r\n        tableElem.contains(event.target)\r\n      ) {\r\n        if (isAtEdgeOfTable(event)) {\r\n          setSelected(true)\r\n          setPrimarySelectedCellID(null)\r\n          selectTable()\r\n          return\r\n        }\r\n        setSelected(false)\r\n        if (isStartingResize(event.target)) {\r\n          setResizingID(possibleID)\r\n          tableElem.style.userSelect = 'none'\r\n          resizeMeasureRef.current = {\r\n            point: event.clientX,\r\n            size: getTableCellWidth(event.target),\r\n          }\r\n          return\r\n        }\r\n        mouseDownRef.current = true\r\n        if (primarySelectedCellID !== possibleID) {\r\n          if (isEditing) {\r\n            saveEditorToJSON()\r\n          }\r\n          setPrimarySelectedCellID(possibleID)\r\n          setIsEditing(false)\r\n          lastCellIDRef.current = possibleID\r\n        } else {\r\n          lastCellIDRef.current = null\r\n        }\r\n        setSelectedCellIDs(NO_CELLS)\r\n      } else if (\r\n        primarySelectedCellID !== null &&\r\n        !isTargetOnPossibleUIControl(event.target)\r\n      ) {\r\n        setSelected(false)\r\n        mouseDownRef.current = false\r\n        if (isEditing) {\r\n          saveEditorToJSON()\r\n        }\r\n        setPrimarySelectedCellID(null)\r\n        setSelectedCellIDs(NO_CELLS)\r\n        setIsEditing(false)\r\n        lastCellIDRef.current = null\r\n      }\r\n    }\r\n\r\n    const tableRect = tableElem.getBoundingClientRect()\r\n\r\n    const handlePointerMove = (event) => {\r\n      if (resizingID !== null) {\r\n        const tableResizerRulerElem = tableResizerRulerRef.current\r\n        if (tableResizerRulerElem !== null) {\r\n          const {size, point} = resizeMeasureRef.current\r\n          const diff = event.clientX - point\r\n          const newWidth = size + diff\r\n          let x = event.clientX - tableRect.x\r\n          if (x < 10) {\r\n            x = 10\r\n          } else if (x > tableRect.width - 10) {\r\n            x = tableRect.width - 10\r\n          } else if (newWidth < 20) {\r\n            x = point - size + 20 - tableRect.x\r\n          }\r\n          tableResizerRulerElem.style.left = `${x}px`\r\n        }\r\n        return\r\n      }\r\n      if (!isEditing) {\r\n        const {clientX, clientY} = event\r\n        const {width, x, y, height} = tableRect\r\n        const isOnRightEdge =\r\n          clientX > x + width * 0.9 &&\r\n          clientX < x + width + 40 &&\r\n          !mouseDownRef.current\r\n        setShowAddColumns(isOnRightEdge)\r\n        const isOnBottomEdge =\r\n          event.target === addRowsRef.current ||\r\n          (clientY > y + height * 0.85 &&\r\n            clientY < y + height + 5 &&\r\n            !mouseDownRef.current)\r\n        setShowAddRows(isOnBottomEdge)\r\n      }\r\n      if (\r\n        isEditing ||\r\n        !mouseDownRef.current ||\r\n        primarySelectedCellID === null\r\n      ) {\r\n        return\r\n      }\r\n      const possibleID = getCellID(event.target)\r\n      if (possibleID !== null && possibleID !== lastCellIDRef.current) {\r\n        if (selectedCellIDs.length === 0) {\r\n          tableElem.style.userSelect = 'none'\r\n        }\r\n        const selectedIDs = getSelectedIDs(\r\n          rows,\r\n          primarySelectedCellID,\r\n          possibleID,\r\n          cellCoordMap,\r\n        )\r\n        if (selectedIDs.length === 1) {\r\n          setSelectedCellIDs(NO_CELLS)\r\n        } else {\r\n          setSelectedCellIDs(selectedIDs)\r\n        }\r\n        lastCellIDRef.current = possibleID\r\n      }\r\n    }\r\n\r\n    const handlePointerUp = (event) => {\r\n      if (resizingID !== null) {\r\n        const {size, point} = resizeMeasureRef.current\r\n        const diff = event.clientX - point\r\n        let newWidth = size + diff\r\n        if (newWidth < 10) {\r\n          newWidth = 10\r\n        }\r\n        updateTableNode((tableNode) => {\r\n          const [x] = cellCoordMap.get(resizingID)\r\n          $addUpdateTag('history-push')\r\n          tableNode.updateColumnWidth(x, newWidth)\r\n        })\r\n        setResizingID(null)\r\n      }\r\n      if (\r\n        tableElem !== null &&\r\n        selectedCellIDs.length > 1 &&\r\n        mouseDownRef.current\r\n      ) {\r\n        tableElem.style.userSelect = 'text'\r\n        window.getSelection()?.removeAllRanges()\r\n      }\r\n      mouseDownRef.current = false\r\n    }\r\n\r\n    doc.addEventListener('pointerdown', handlePointerDown)\r\n    doc.addEventListener('pointermove', handlePointerMove)\r\n    doc.addEventListener('pointerup', handlePointerUp)\r\n\r\n    return () => {\r\n      doc.removeEventListener('pointerdown', handlePointerDown)\r\n      doc.removeEventListener('pointermove', handlePointerMove)\r\n      doc.removeEventListener('pointerup', handlePointerUp)\r\n    }\r\n  }, [\r\n    cellEditor,\r\n    editor,\r\n    isEditing,\r\n    rows,\r\n    saveEditorToJSON,\r\n    primarySelectedCellID,\r\n    selectedCellSet,\r\n    selectedCellIDs,\r\n    cellCoordMap,\r\n    resizingID,\r\n    updateTableNode,\r\n    setSelected,\r\n    selectTable,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    if (!isEditing && primarySelectedCellID !== null) {\r\n      const doc = getCurrentDocument(editor)\r\n\r\n      const loadContentIntoCell = (cell) => {\r\n        if (cell !== null && cellEditor !== null) {\r\n          const editorStateJSON = cell.json\r\n          const editorState = cellEditor.parseEditorState(editorStateJSON)\r\n          cellEditor.setEditorState(editorState)\r\n        }\r\n      }\r\n\r\n      const handleDblClick = (event) => {\r\n        const possibleID = getCellID(event.target)\r\n        if (possibleID === primarySelectedCellID && editor.isEditable()) {\r\n          const cell = getCell(rows, possibleID, cellCoordMap)\r\n          loadContentIntoCell(cell)\r\n          setIsEditing(true)\r\n          setSelectedCellIDs(NO_CELLS)\r\n        }\r\n      }\r\n\r\n      const handleKeyDown = (event) => {\r\n        // Ignore arrow keys, escape or tab\r\n        const keyCode = event.keyCode\r\n        if (\r\n          keyCode === 16 ||\r\n          keyCode === 27 ||\r\n          keyCode === 9 ||\r\n          keyCode === 37 ||\r\n          keyCode === 38 ||\r\n          keyCode === 39 ||\r\n          keyCode === 40 ||\r\n          keyCode === 8 ||\r\n          keyCode === 46 ||\r\n          !editor.isEditable()\r\n        ) {\r\n          return\r\n        }\r\n        if (keyCode === 13) {\r\n          event.preventDefault()\r\n        }\r\n        if (\r\n          !isEditing &&\r\n          primarySelectedCellID !== null &&\r\n          editor.getEditorState().read(() => $getSelection() === null) &&\r\n          (event.target).contentEditable !== 'true'\r\n        ) {\r\n          if (isCopy(keyCode, event.shiftKey, event.metaKey, event.ctrlKey)) {\r\n            editor.dispatchCommand(COPY_COMMAND, event)\r\n            return\r\n          }\r\n          if (isCut(keyCode, event.shiftKey, event.metaKey, event.ctrlKey)) {\r\n            editor.dispatchCommand(CUT_COMMAND, event)\r\n            return\r\n          }\r\n          if (isPaste(keyCode, event.shiftKey, event.metaKey, event.ctrlKey)) {\r\n            editor.dispatchCommand(PASTE_COMMAND, event)\r\n            return\r\n          }\r\n        }\r\n        if (event.metaKey || event.ctrlKey || event.altKey) {\r\n          return\r\n        }\r\n        const cell = getCell(rows, primarySelectedCellID, cellCoordMap)\r\n        loadContentIntoCell(cell)\r\n        setIsEditing(true)\r\n        setSelectedCellIDs(NO_CELLS)\r\n      }\r\n\r\n      doc.addEventListener('dblclick', handleDblClick)\r\n      doc.addEventListener('keydown', handleKeyDown)\r\n\r\n      return () => {\r\n        doc.removeEventListener('dblclick', handleDblClick)\r\n        doc.removeEventListener('keydown', handleKeyDown)\r\n      }\r\n    }\r\n  }, [\r\n    cellEditor,\r\n    editor,\r\n    isEditing,\r\n    rows,\r\n    primarySelectedCellID,\r\n    cellCoordMap,\r\n  ])\r\n\r\n  const updateCellsByID = useCallback(\r\n    (ids, fn) => {\r\n      $updateCells(rows, ids, cellCoordMap, cellEditor, updateTableNode, fn)\r\n    },\r\n    [cellCoordMap, cellEditor, rows, updateTableNode],\r\n  )\r\n\r\n  const clearCellsCommand = useCallback(() => {\r\n    if (primarySelectedCellID !== null && !isEditing) {\r\n      updateCellsByID([primarySelectedCellID, ...selectedCellIDs], () => {\r\n        const root = $getRoot()\r\n        root.clear()\r\n        root.append($createParagraphNode())\r\n      })\r\n      return true\r\n    } else if (isSelected) {\r\n      updateTableNode((tableNode) => {\r\n        $addUpdateTag('history-push')\r\n        tableNode.selectNext()\r\n        tableNode.remove()\r\n      })\r\n    }\r\n    return false\r\n  }, [\r\n    isEditing,\r\n    isSelected,\r\n    primarySelectedCellID,\r\n    selectedCellIDs,\r\n    updateCellsByID,\r\n    updateTableNode,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const tableElem = tableRef.current\r\n    if (tableElem === null) {\r\n      return\r\n    }\r\n\r\n    const copyDataToClipboard = (\r\n      event,\r\n      htmlString,\r\n      lexicalString,\r\n      plainTextString,\r\n    ) => {\r\n      const clipboardData =\r\n        event instanceof KeyboardEvent ? null : event.clipboardData\r\n      event.preventDefault()\r\n\r\n      if (clipboardData != null) {\r\n        clipboardData.setData('text/html', htmlString)\r\n        clipboardData.setData('text/plain', plainTextString)\r\n        clipboardData.setData('application/x-lexical-editor', lexicalString)\r\n      } else {\r\n        const clipboard = navigator.clipboard\r\n        if (clipboard != null) {\r\n          // Most browsers only support a single item in the clipboard at one time.\r\n          // So we optimize by only putting in HTML.\r\n          const data = [\r\n            new ClipboardItem({\r\n              'text/html': new Blob([htmlString], {\r\n                type: 'text/html',\r\n              }),\r\n            }),\r\n          ]\r\n          clipboard.write(data)\r\n        }\r\n      }\r\n    }\r\n\r\n    const getTypeFromObject = async (\r\n      clipboardData,\r\n      type,\r\n    ) => {\r\n      try {\r\n        return clipboardData instanceof DataTransfer\r\n          ? clipboardData.getData(type)\r\n          : clipboardData instanceof ClipboardItem\r\n            ? await (await clipboardData.getType(type)).text()\r\n            : ''\r\n      } catch {\r\n        return ''\r\n      }\r\n    }\r\n\r\n    const pasteContent = async (event) => {\r\n      let clipboardData =\r\n        (event instanceof InputEvent ? null : event.clipboardData) || null\r\n\r\n      if (primarySelectedCellID !== null && cellEditor !== null) {\r\n        event.preventDefault()\r\n\r\n        if (clipboardData === null) {\r\n          try {\r\n            const items = await navigator.clipboard.read()\r\n            clipboardData = items[0]\r\n          } catch {\r\n            // NO-OP\r\n          }\r\n        }\r\n        const lexicalString =\r\n          clipboardData !== null\r\n            ? await getTypeFromObject(\r\n              clipboardData,\r\n              'application/x-lexical-editor',\r\n            )\r\n            : ''\r\n\r\n        if (lexicalString) {\r\n          try {\r\n            const payload = JSON.parse(lexicalString)\r\n            if (\r\n              payload.namespace === editor._config.namespace &&\r\n              Array.isArray(payload.nodes)\r\n            ) {\r\n              $updateCells(\r\n                rows,\r\n                [primarySelectedCellID],\r\n                cellCoordMap,\r\n                cellEditor,\r\n                updateTableNode,\r\n                () => {\r\n                  const root = $getRoot()\r\n                  root.clear()\r\n                  root.append($createParagraphNode())\r\n                  root.selectEnd()\r\n                  const nodes = $generateNodesFromSerializedNodes(\r\n                    payload.nodes,\r\n                  )\r\n                  const sel = $getSelection()\r\n                  if ($isRangeSelection(sel)) {\r\n                    $insertGeneratedNodes(cellEditor, nodes, sel)\r\n                  }\r\n                },\r\n              )\r\n              return\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch {}\r\n        }\r\n        const htmlString =\r\n          clipboardData !== null\r\n            ? await getTypeFromObject(clipboardData, 'text/html')\r\n            : ''\r\n\r\n        if (htmlString) {\r\n          try {\r\n            const parser = new DOMParser()\r\n            const dom = parser.parseFromString(htmlString, 'text/html')\r\n            const possibleTableElement = dom.querySelector('table')\r\n\r\n            if (possibleTableElement != null) {\r\n              const pasteRows = extractRowsFromHTML(possibleTableElement)\r\n              updateTableNode((tableNode) => {\r\n                const [x, y] = cellCoordMap.get(primarySelectedCellID)\r\n                $addUpdateTag('history-push')\r\n                tableNode.mergeRows(x, y, pasteRows)\r\n              })\r\n              return\r\n            }\r\n            $updateCells(\r\n              rows,\r\n              [primarySelectedCellID],\r\n              cellCoordMap,\r\n              cellEditor,\r\n              updateTableNode,\r\n              () => {\r\n                const root = $getRoot()\r\n                root.clear()\r\n                root.append($createParagraphNode())\r\n                root.selectEnd()\r\n                const nodes = $generateNodesFromDOM(editor, dom)\r\n                const sel = $getSelection()\r\n                if ($isRangeSelection(sel)) {\r\n                  $insertGeneratedNodes(cellEditor, nodes, sel)\r\n                }\r\n              },\r\n            )\r\n            return\r\n            // eslint-disable-next-line no-empty\r\n          } catch {}\r\n        }\r\n\r\n        // Multi-line plain text in rich text mode pasted as separate paragraphs\r\n        // instead of single paragraph with linebreaks.\r\n        const text =\r\n          clipboardData !== null\r\n            ? await getTypeFromObject(clipboardData, 'text/plain')\r\n            : ''\r\n\r\n        if (text != null) {\r\n          $updateCells(\r\n            rows,\r\n            [primarySelectedCellID],\r\n            cellCoordMap,\r\n            cellEditor,\r\n            updateTableNode,\r\n            () => {\r\n              const root = $getRoot()\r\n              root.clear()\r\n              root.selectEnd()\r\n              const sel = $getSelection()\r\n              if (sel !== null) {\r\n                sel.insertRawText(text)\r\n              }\r\n            },\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    const copyPrimaryCell = (event) => {\r\n      if (primarySelectedCellID !== null && cellEditor !== null) {\r\n        const cell = getCell(rows, primarySelectedCellID, cellCoordMap)\r\n        const json = cell.json\r\n        const htmlString = cellHTMLCache.get(json) || null\r\n        if (htmlString === null) {\r\n          return\r\n        }\r\n        const editorState = cellEditor.parseEditorState(json)\r\n        const plainTextString = editorState.read(() =>\r\n          $getRoot().getTextContent(),\r\n        )\r\n        const lexicalString = editorState.read(() => {\r\n          return JSON.stringify(\r\n            $generateJSONFromSelectedNodes(cellEditor, null),\r\n          )\r\n        })\r\n\r\n        copyDataToClipboard(event, htmlString, lexicalString, plainTextString)\r\n      }\r\n    }\r\n\r\n    const copyCellRange = (event) => {\r\n      const lastCellID = lastCellIDRef.current\r\n      if (\r\n        primarySelectedCellID !== null &&\r\n        cellEditor !== null &&\r\n        lastCellID !== null\r\n      ) {\r\n        const rect = getSelectedRect(\r\n          primarySelectedCellID,\r\n          lastCellID,\r\n          cellCoordMap,\r\n        )\r\n        if (rect === null) {\r\n          return\r\n        }\r\n        const dom = exportTableCellsToHTML(rows, rect)\r\n        const htmlString = dom.outerHTML\r\n        const plainTextString = dom.outerText\r\n        const tableNodeJSON = editor.getEditorState().read(() => {\r\n          const tableNode = $getNodeByKey(nodeKey)\r\n          return tableNode.exportJSON()\r\n        })\r\n        tableNodeJSON.rows = extractCellsFromRows(rows, rect)\r\n        const lexicalJSON = {\r\n          namespace: cellEditor._config.namespace,\r\n          nodes: [tableNodeJSON],\r\n        }\r\n        const lexicalString = JSON.stringify(lexicalJSON)\r\n        copyDataToClipboard(event, htmlString, lexicalString, plainTextString)\r\n      }\r\n    }\r\n\r\n    const handlePaste = (\r\n      event,\r\n      activeEditor,\r\n    ) => {\r\n      const selection = $getSelection()\r\n      if (\r\n        primarySelectedCellID !== null &&\r\n        !isEditing &&\r\n        selection === null &&\r\n        activeEditor === editor\r\n      ) {\r\n        pasteContent(event)\r\n        mouseDownRef.current = false\r\n        setSelectedCellIDs(NO_CELLS)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    const handleCopy = (event, activeEditor) => {\r\n      const selection = $getSelection()\r\n      if (\r\n        primarySelectedCellID !== null &&\r\n        !isEditing &&\r\n        selection === null &&\r\n        activeEditor === editor\r\n      ) {\r\n        if (selectedCellIDs.length === 0) {\r\n          copyPrimaryCell(event)\r\n        } else {\r\n          copyCellRange(event)\r\n        }\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    return mergeRegister(\r\n      editor.registerCommand(\r\n        CLICK_COMMAND,\r\n        (payload) => {\r\n          const selection = $getSelection()\r\n          if ($isNodeSelection(selection)) {\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        PASTE_COMMAND,\r\n        handlePaste,\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        COPY_COMMAND,\r\n        handleCopy,\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        CUT_COMMAND,\r\n        (event, activeEditor) => {\r\n          if (handleCopy(event, activeEditor)) {\r\n            clearCellsCommand()\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_BACKSPACE_COMMAND,\r\n        clearCellsCommand,\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_DELETE_COMMAND,\r\n        clearCellsCommand,\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        FORMAT_TEXT_COMMAND,\r\n        (payload) => {\r\n          if (primarySelectedCellID !== null && !isEditing) {\r\n            $updateCells(\r\n              rows,\r\n              [primarySelectedCellID, ...selectedCellIDs],\r\n              cellCoordMap,\r\n              cellEditor,\r\n              updateTableNode,\r\n              () => {\r\n                const sel = $createSelectAll()\r\n                sel.formatText(payload)\r\n              },\r\n            )\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_ENTER_COMMAND,\r\n        (event, targetEditor) => {\r\n          const selection = $getSelection()\r\n          if (\r\n            primarySelectedCellID === null &&\r\n            !isEditing &&\r\n            $isNodeSelection(selection) &&\r\n            selection.has(nodeKey) &&\r\n            selection.getNodes().length === 1 &&\r\n            targetEditor === editor\r\n          ) {\r\n            const firstCellID = rows[0].cells[0].id\r\n            setPrimarySelectedCellID(firstCellID)\r\n            focusCell(tableElem, firstCellID)\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            clearSelection()\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_TAB_COMMAND,\r\n        (event) => {\r\n          const selection = $getSelection()\r\n          if (\r\n            !isEditing &&\r\n            selection === null &&\r\n            primarySelectedCellID !== null\r\n          ) {\r\n            const isBackward = event.shiftKey\r\n            const [x, y] = cellCoordMap.get(primarySelectedCellID)\r\n            event.preventDefault()\r\n            let nextX = null\r\n            let nextY = null\r\n            if (x === 0 && isBackward) {\r\n              if (y !== 0) {\r\n                nextY = y - 1\r\n                nextX = rows[nextY].cells.length - 1\r\n              }\r\n            } else if (x === rows[y].cells.length - 1 && !isBackward) {\r\n              if (y !== rows.length - 1) {\r\n                nextY = y + 1\r\n                nextX = 0\r\n              }\r\n            } else if (!isBackward) {\r\n              nextX = x + 1\r\n              nextY = y\r\n            } else {\r\n              nextX = x - 1\r\n              nextY = y\r\n            }\r\n            if (nextX !== null && nextY !== null) {\r\n              modifySelectedCells(nextX, nextY, false)\r\n              return true\r\n            }\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_ARROW_UP_COMMAND,\r\n        (event, targetEditor) => {\r\n          const selection = $getSelection()\r\n          if (!isEditing && selection === null) {\r\n            const extend = event.shiftKey\r\n            const cellID = extend\r\n              ? lastCellIDRef.current || primarySelectedCellID\r\n              : primarySelectedCellID\r\n            if (cellID !== null) {\r\n              const [x, y] = cellCoordMap.get(cellID)\r\n              if (y !== 0) {\r\n                modifySelectedCells(x, y - 1, extend)\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          if (!$isRangeSelection(selection) || targetEditor !== cellEditor) {\r\n            return false\r\n          }\r\n          if (\r\n            selection.isCollapsed() &&\r\n            selection.anchor\r\n              .getNode()\r\n              .getTopLevelElementOrThrow()\r\n              .getPreviousSibling() === null\r\n          ) {\r\n            event.preventDefault()\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_ARROW_DOWN_COMMAND,\r\n        (event, targetEditor) => {\r\n          const selection = $getSelection()\r\n          if (!isEditing && selection === null) {\r\n            const extend = event.shiftKey\r\n            const cellID = extend\r\n              ? lastCellIDRef.current || primarySelectedCellID\r\n              : primarySelectedCellID\r\n            if (cellID !== null) {\r\n              const [x, y] = cellCoordMap.get(cellID)\r\n              if (y !== rows.length - 1) {\r\n                modifySelectedCells(x, y + 1, extend)\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          if (!$isRangeSelection(selection) || targetEditor !== cellEditor) {\r\n            return false\r\n          }\r\n          if (\r\n            selection.isCollapsed() &&\r\n            selection.anchor\r\n              .getNode()\r\n              .getTopLevelElementOrThrow()\r\n              .getNextSibling() === null\r\n          ) {\r\n            event.preventDefault()\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_ARROW_LEFT_COMMAND,\r\n        (event, targetEditor) => {\r\n          const selection = $getSelection()\r\n          if (!isEditing && selection === null) {\r\n            const extend = event.shiftKey\r\n            const cellID = extend\r\n              ? lastCellIDRef.current || primarySelectedCellID\r\n              : primarySelectedCellID\r\n            if (cellID !== null) {\r\n              const [x, y] = cellCoordMap.get(cellID)\r\n              if (x !== 0) {\r\n                modifySelectedCells(x - 1, y, extend)\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          if (!$isRangeSelection(selection) || targetEditor !== cellEditor) {\r\n            return false\r\n          }\r\n          if (selection.isCollapsed() && selection.anchor.offset === 0) {\r\n            event.preventDefault()\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_ARROW_RIGHT_COMMAND,\r\n        (event, targetEditor) => {\r\n          const selection = $getSelection()\r\n          if (!isEditing && selection === null) {\r\n            const extend = event.shiftKey\r\n            const cellID = extend\r\n              ? lastCellIDRef.current || primarySelectedCellID\r\n              : primarySelectedCellID\r\n            if (cellID !== null) {\r\n              const [x, y] = cellCoordMap.get(cellID)\r\n              if (x !== rows[y].cells.length - 1) {\r\n                modifySelectedCells(x + 1, y, extend)\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          if (!$isRangeSelection(selection) || targetEditor !== cellEditor) {\r\n            return false\r\n          }\r\n          if (selection.isCollapsed()) {\r\n            const anchor = selection.anchor\r\n            if (\r\n              (anchor.type === 'text' &&\r\n                anchor.offset === anchor.getNode().getTextContentSize()) ||\r\n              (anchor.type === 'element' &&\r\n                anchor.offset === anchor.getNode().getChildrenSize())\r\n            ) {\r\n              event.preventDefault()\r\n              return true\r\n            }\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_ESCAPE_COMMAND,\r\n        (event, targetEditor) => {\r\n          const selection = $getSelection()\r\n          if (!isEditing && selection === null && targetEditor === editor) {\r\n            setSelected(true)\r\n            setPrimarySelectedCellID(null)\r\n            selectTable()\r\n            return true\r\n          }\r\n          if (!$isRangeSelection(selection)) {\r\n            return false\r\n          }\r\n          if (isEditing) {\r\n            saveEditorToJSON()\r\n            setIsEditing(false)\r\n            if (primarySelectedCellID !== null) {\r\n              setTimeout(() => {\r\n                focusCell(tableElem, primarySelectedCellID)\r\n              }, 20)\r\n            }\r\n            return true\r\n          }\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW,\r\n      ),\r\n    )\r\n  }, [\r\n    cellCoordMap,\r\n    cellEditor,\r\n    clearCellsCommand,\r\n    clearSelection,\r\n    editor,\r\n    isEditing,\r\n    modifySelectedCells,\r\n    nodeKey,\r\n    primarySelectedCellID,\r\n    rows,\r\n    saveEditorToJSON,\r\n    selectTable,\r\n    selectedCellIDs,\r\n    setSelected,\r\n    updateTableNode,\r\n  ])\r\n\r\n  if (cellEditor === null) {\r\n    return\r\n  }\r\n\r\n  return (\r\n    <div style={{position: 'relative'}}>\r\n      <table\r\n        className={`${theme.table} ${isSelected ? theme.tableSelected : ''}`}\r\n        ref={tableRef}\r\n        tabIndex={-1}>\r\n        <tbody>\r\n          {rows.map((row) => (\r\n            <tr key={row.id} className={theme.tableRow}>\r\n              {row.cells.map((cell) => {\r\n                const {id} = cell\r\n                return (\r\n                  <TableCell\r\n                    key={id}\r\n                    cell={cell}\r\n                    theme={theme}\r\n                    isSelected={selectedCellSet.has(id)}\r\n                    isPrimarySelected={primarySelectedCellID === id}\r\n                    isEditing={isEditing}\r\n                    sortingOptions={sortingOptions}\r\n                    cellEditor={cellEditor}\r\n                    updateCellsByID={updateCellsByID}\r\n                    updateTableNode={updateTableNode}\r\n                    cellCoordMap={cellCoordMap}\r\n                    rows={rows}\r\n                    setSortingOptions={setSortingOptions}\r\n                  />\r\n                )\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {showAddColumns && (\r\n        <button className={theme.tableAddColumns} onClick={addColumns} />\r\n      )}\r\n      {showAddRows && (\r\n        <button\r\n          className={theme.tableAddRows}\r\n          onClick={addRows}\r\n          ref={addRowsRef}\r\n        />\r\n      )}\r\n      {resizingID !== null && (\r\n        <div className={theme.tableResizeRuler} ref={tableResizerRulerRef} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalCollaborationContext = process.env.NODE_ENV === 'development' ? require('./LexicalCollaborationContext.dev.js') : require('./LexicalCollaborationContext.prod.js')\nmodule.exports = LexicalCollaborationContext;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=require(\"react\");\nlet c=[[\"Cat\",\"rgb(125, 50, 0)\"],[\"Dog\",\"rgb(100, 0, 0)\"],[\"Rabbit\",\"rgb(150, 0, 0)\"],[\"Frog\",\"rgb(200, 0, 0)\"],[\"Fox\",\"rgb(200, 75, 0)\"],[\"Hedgehog\",\"rgb(0, 75, 0)\"],[\"Pigeon\",\"rgb(0, 125, 0)\"],[\"Squirrel\",\"rgb(75, 100, 0)\"],[\"Bear\",\"rgb(125, 100, 0)\"],[\"Tiger\",\"rgb(0, 0, 150)\"],[\"Leopard\",\"rgb(0, 0, 200)\"],[\"Zebra\",\"rgb(0, 0, 250)\"],[\"Wolf\",\"rgb(0, 100, 150)\"],[\"Owl\",\"rgb(0, 100, 100)\"],[\"Gull\",\"rgb(100, 0, 100)\"],[\"Squid\",\"rgb(150, 0, 150)\"]],d=c[Math.floor(Math.random()*c.length)],e=b.createContext({clientID:0,\ncolor:d[1],isCollabActive:!1,name:d[0],yjsDocMap:new Map});exports.CollaborationContext=e;exports.useCollaborationContext=function(f,g){let a=b.useContext(e);null!=f&&(a.name=f);null!=g&&(a.color=g);return a}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalNestedComposer = process.env.NODE_ENV === 'development' ? require('./LexicalNestedComposer.dev.js') : require('./LexicalNestedComposer.prod.js')\nmodule.exports = LexicalNestedComposer;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var d=require(\"@lexical/react/LexicalCollaborationContext\"),m=require(\"@lexical/react/LexicalComposerContext\"),r=require(\"react\");function t(a){let h=new URLSearchParams;h.append(\"code\",a);for(let e=1;e<arguments.length;e++)h.append(\"v\",arguments[e]);throw Error(`Minified Lexical error #${a}; visit https://lexical.dev/docs/error?${h} for the full message or `+\"use the non-minified dev environment for full errors and additional helpful warnings.\");}\nexports.LexicalNestedComposer=function({initialEditor:a,children:h,initialNodes:e,initialTheme:u,skipCollabChecks:v}){let q=r.useRef(!1),n=r.useContext(m.LexicalComposerContext);null==n&&t(9);let [f,{getTheme:w}]=n,y=r.useMemo(()=>{var b=u||w()||void 0;const x=m.createLexicalComposerContext(n,b);void 0!==b&&(a._config.theme=b);a._parentEditor=f;if(e)for(var c of e){var g=b=null;\"function\"!==typeof c&&(g=c,c=g.replace,b=g.with,g=g.withKlass||null);const k=a._nodes.get(c.getType());a._nodes.set(c.getType(),\n{exportDOM:k?k.exportDOM:void 0,klass:c,replace:b,replaceWithKlass:g,transforms:new Set})}else{c=a._nodes=new Map(f._nodes);for(const [k,l]of c)a._nodes.set(k,{exportDOM:l.exportDOM,klass:l.klass,replace:l.replace,replaceWithKlass:l.replaceWithKlass,transforms:new Set})}a._config.namespace=f._config.namespace;a._editable=f._editable;return[a,x]},[]),{isCollabActive:z,yjsDocMap:A}=d.useCollaborationContext(),p=v||q.current||A.has(a.getKey());r.useEffect(()=>{p&&(q.current=!0)},[p]);r.useEffect(()=>\nf.registerEditableListener(b=>{a.setEditable(b)}),[a,f]);return r.createElement(m.LexicalComposerContext.Provider,{value:y},!z||p?h:null)}\n"],"names":["NO_CELLS","createEmptyParagraphHTML","theme","concat","paragraph","focusCell","tableElem","id","cellElem","querySelector","focus","generateHTMLFromJSON","editorStateJSON","cellEditor","editorState","parseEditorState","html","cellHTMLCache","get","undefined","read","$generateHtmlFromNodes","textContent","$getRoot","getTextContent","set","cellTextContentCache","getCurrentDocument","editor","rootElement","getRootElement","ownerDocument","document","getCellID","domElement","node","possibleID","getAttribute","parentElement","getTableCellWidth","nodeName","getBoundingClientRect","width","$updateCells","rows","ids","cellCoordMap","updateTableNode","fn","cell","getCell","json","_headless","setEditorState","update","discrete","newJSON","JSON","stringify","getEditorState","tableNode","x","y","$addUpdateTag","updateCellJSON","getSelectedRect","startID","endID","startCoords","endCoords","startX","Math","min","endX","max","startY","endY","getSelectedIDs","rect","push","cells","TableCellEditor","_ref","cellEditorConfig","cellEditorPlugins","useContext","CellContext","_jsx","LexicalNestedComposer","initialEditor","initialTheme","initialNodes","nodes","skipCollabChecks","children","cellID","coords","TableActionMenu","_ref2","menuElem","updateCellsByID","onClose","setSortingOptions","sortingOptions","dropDownRef","useRef","HTMLDivElement","useEffect","dropdownElem","current","style","top","left","handleClickOutside","event","contains","target","stopPropagation","window","addEventListener","removeEventListener","_jsxs","className","ref","onPointerMove","e","onPointerDown","onPointerUp","onClick","updateCellType","type","root","clear","append","$createParagraphNode","_Fragment","insertRowAt","insertColumnAt","length","deleteColumnAt","deleteRowAt","selectNext","remove","TableCell","_ref3","isEditing","isSelected","isPrimarySelected","showMenu","setShowMenu","useState","menuRootRef","isHeader","CellComponent","cellWidth","isSorted","tableCell","tableCellHeader","tableCellSelected","tabIndex","tableCellPrimarySelected","tableCellEditing","dangerouslySetInnerHTML","__html","tableCellResizer","tableCellActionButtonContainer","tableCellActionButton","createPortal","body","tableCellSortedIndicator","TableComponent","_ref4","nodeKey","rawRows","setSelected","clearSelection","useLexicalNodeSelection","resizeMeasureRef","point","size","addRowsRef","lastCellIDRef","tableResizerRulerRef","setIsEditing","showAddColumns","setShowAddColumns","showAddRows","setShowAddRows","useLexicalComposerContext","mouseDownRef","resizingID","setResizingID","tableRef","useMemo","map","Map","_rows","slice","sort","a","b","aCells","bCells","aContent","bContent","localeCompare","unshift","primarySelectedCellID","setPrimarySelectedCellID","LexicalEditor","selectedCellIDs","setSelectedCellIDs","selectedCellSet","Set","activeElement","useCallback","$getNodeByKey","$isTableNode","modifySelectedCells","extend","selectedIDs","saveEditorToJSON","selectTable","setTimeout","parentRootElement","_window$getSelection","preventScroll","getSelection","removeAllRanges","doc","handlePointerDown","isEditable","clientX","tableRect","clientY","isAtEdgeOfTable","nodeType","hasAttribute","userSelect","isTargetOnPossibleUIControl","handlePointerMove","tableResizerRulerElem","newWidth","height","isOnRightEdge","isOnBottomEdge","handlePointerUp","updateColumnWidth","_window$getSelection2","loadContentIntoCell","handleDblClick","handleKeyDown","keyCode","preventDefault","$getSelection","contentEditable","shiftKey","metaKey","ctrlKey","IS_APPLE","isCopy","dispatchCommand","COPY_COMMAND","isCut","CUT_COMMAND","isPaste","PASTE_COMMAND","altKey","clearCellsCommand","copyDataToClipboard","htmlString","lexicalString","plainTextString","clipboardData","KeyboardEvent","setData","clipboard","navigator","data","ClipboardItem","Blob","write","getTypeFromObject","async","DataTransfer","getData","getType","text","copyCellRange","lastCellID","dom","exportTableCellsToHTML","outerHTML","outerText","tableNodeJSON","exportJSON","newRows","row","newRow","createRow","cellClone","createUID","extractCellsFromRows","lexicalJSON","namespace","_config","handleCopy","activeEditor","selection","$generateJSONFromSelectedNodes","copyPrimaryCell","mergeRegister","registerCommand","CLICK_COMMAND","payload","$isNodeSelection","COMMAND_PRIORITY_LOW","handlePaste","InputEvent","parse","Array","isArray","selectEnd","$generateNodesFromSerializedNodes","sel","$isRangeSelection","$insertGeneratedNodes","DOMParser","parseFromString","possibleTableElement","pasteRows","extractRowsFromHTML","mergeRows","$generateNodesFromDOM","insertRawText","pasteContent","KEY_BACKSPACE_COMMAND","KEY_DELETE_COMMAND","FORMAT_TEXT_COMMAND","$createRangeSelection","getChildrenSize","$createSelectAll","formatText","KEY_ENTER_COMMAND","targetEditor","has","getNodes","firstCellID","KEY_TAB_COMMAND","isBackward","nextX","nextY","KEY_ARROW_UP_COMMAND","isCollapsed","anchor","getNode","getTopLevelElementOrThrow","getPreviousSibling","KEY_ARROW_DOWN_COMMAND","getNextSibling","KEY_ARROW_LEFT_COMMAND","offset","KEY_ARROW_RIGHT_COMMAND","getTextContentSize","KEY_ESCAPE_COMMAND","position","table","tableSelected","tableRow","tableAddColumns","addColumns","tableAddRows","addRows","tableResizeRuler","LexicalCollaborationContext","require","module","exports","c","d","floor","random","createContext","clientID","color","isCollabActive","name","yjsDocMap","CollaborationContext","useCollaborationContext","f","g","m","r","h","u","v","q","n","LexicalComposerContext","URLSearchParams","arguments","Error","t","getTheme","w","createLexicalComposerContext","_parentEditor","replace","with","withKlass","k","_nodes","exportDOM","klass","replaceWithKlass","transforms","l","_editable","z","A","p","getKey","registerEditableListener","setEditable","createElement","Provider","value"],"sourceRoot":""}